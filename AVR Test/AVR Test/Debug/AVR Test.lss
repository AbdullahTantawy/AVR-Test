
AVR Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  00000e3e  00000ed2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000c8  008000c8  00000f3a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002110  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d4c  00000000  00000000  000032b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012f8  00000000  00000000  00003ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e0  00000000  00000000  000052f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000837  00000000  00000000  000057d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bde  00000000  00000000  0000600b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00007be9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__vector_10>
  2c:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	5b 03       	fmul	r21, r19
  56:	5f 03       	fmul	r21, r23
  58:	63 03       	mulsu	r22, r19
  5a:	67 03       	mulsu	r22, r23
  5c:	6b 03       	fmul	r22, r19
  5e:	6f 03       	fmul	r22, r23
  60:	73 03       	mulsu	r23, r19
  62:	77 03       	mulsu	r23, r23
  64:	7b 03       	fmul	r23, r19
  66:	7f 03       	fmul	r23, r23

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	10 e0       	ldi	r17, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3c       	cpi	r26, 0xC8	; 200
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	a8 ec       	ldi	r26, 0xC8	; 200
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 3d       	cpi	r26, 0xD1	; 209
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 31 01 	call	0x262	; 0x262 <main>
  9e:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <A_RightAnswer>:


void A_RightAnswer(void)
{
	
	H_Buzzer_Once();
  a6:	0e 94 89 01 	call	0x312	; 0x312 <H_Buzzer_Once>
	H_Lcd_GoTo(1,2);
  aa:	62 e0       	ldi	r22, 0x02	; 2
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	0e 94 c6 03 	call	0x78c	; 0x78c <H_Lcd_GoTo>
	H_Lcd_WriteStr(">>> GREAT <<<");
  b2:	86 e6       	ldi	r24, 0x66	; 102
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 f5 01 	call	0x3ea	; 0x3ea <H_Lcd_WriteStr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	8d e3       	ldi	r24, 0x3D	; 61
  be:	99 e4       	ldi	r25, 0x49	; 73
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <A_RightAnswer+0x1a>
  c8:	00 c0       	rjmp	.+0      	; 0xca <A_RightAnswer+0x24>
  ca:	00 00       	nop
	_delay_ms(1500);
	Local_u8_Qnum++;
  cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d0:	8f 5f       	subi	r24, 0xFF	; 255
  d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	H_Lcd_Clr();
  d6:	0e 94 c2 03 	call	0x784	; 0x784 <H_Lcd_Clr>
  da:	08 95       	ret

000000dc <A_WrongAnswer>:
}


void A_WrongAnswer(void)
{
	Local_u8_Min++;
  dc:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <Local_u8_Min>
  e0:	8f 5f       	subi	r24, 0xFF	; 255
  e2:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <Local_u8_Min>
	H_Buzzer_Twice();
  e6:	0e 94 9b 01 	call	0x336	; 0x336 <H_Buzzer_Twice>
	H_Lcd_GoTo(1,0);
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	0e 94 c6 03 	call	0x78c	; 0x78c <H_Lcd_GoTo>
	H_Lcd_WriteStr("> DISPLAY 1 MIN <<<");
  f2:	84 e7       	ldi	r24, 0x74	; 116
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 f5 01 	call	0x3ea	; 0x3ea <H_Lcd_WriteStr>
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	8d ee       	ldi	r24, 0xED	; 237
  fe:	92 e0       	ldi	r25, 0x02	; 2
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <A_WrongAnswer+0x24>
 108:	00 c0       	rjmp	.+0      	; 0x10a <A_WrongAnswer+0x2e>
 10a:	00 00       	nop
	_delay_ms(60);
	H_Buzzer_Twice();
 10c:	0e 94 9b 01 	call	0x336	; 0x336 <H_Buzzer_Twice>
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	8d ee       	ldi	r24, 0xED	; 237
 114:	92 e0       	ldi	r25, 0x02	; 2
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <A_WrongAnswer+0x3a>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <A_WrongAnswer+0x44>
 120:	00 00       	nop
	_delay_ms(60);
	H_Lcd_Clr();
 122:	0e 94 c2 03 	call	0x784	; 0x784 <H_Lcd_Clr>
	H_Lcd_GoTo(1,2);
 126:	62 e0       	ldi	r22, 0x02	; 2
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0e 94 c6 03 	call	0x78c	; 0x78c <H_Lcd_GoTo>
	H_Lcd_WriteStr(">>> LOSER <<<");
 12e:	88 e8       	ldi	r24, 0x88	; 136
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 f5 01 	call	0x3ea	; 0x3ea <H_Lcd_WriteStr>
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	83 ed       	ldi	r24, 0xD3	; 211
 13a:	90 e3       	ldi	r25, 0x30	; 48
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <A_WrongAnswer+0x60>
 144:	00 c0       	rjmp	.+0      	; 0x146 <A_WrongAnswer+0x6a>
 146:	00 00       	nop
	_delay_ms(1000);
	H_Lcd_Clr();
 148:	0e 94 c2 03 	call	0x784	; 0x784 <H_Lcd_Clr>
	A_Asking();
 14c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <A_Asking>
 150:	08 95       	ret

00000152 <A_CheckAnswer>:
	H_Lcd_Clr();
	A_CheckAnswer(Local_u8_Answer);
}

void A_CheckAnswer(u8 Local_u8_Answer)
{
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	00 d0       	rcall	.+0      	; 0x158 <A_CheckAnswer+0x6>
 158:	00 d0       	rcall	.+0      	; 0x15a <A_CheckAnswer+0x8>
 15a:	1f 92       	push	r1
 15c:	cd b7       	in	r28, 0x3d	; 61
 15e:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8_ArrAnswer[5] = {D,D,D,C,C};
 160:	95 e0       	ldi	r25, 0x05	; 5
 162:	e1 e6       	ldi	r30, 0x61	; 97
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	de 01       	movw	r26, r28
 168:	11 96       	adiw	r26, 0x01	; 1
 16a:	01 90       	ld	r0, Z+
 16c:	0d 92       	st	X+, r0
 16e:	9a 95       	dec	r25
 170:	e1 f7       	brne	.-8      	; 0x16a <A_CheckAnswer+0x18>
	if (Local_u8_Answer == Local_u8_ArrAnswer[Local_u8_Qnum-1])
 172:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	2c 0f       	add	r18, r28
 180:	3d 1f       	adc	r19, r29
 182:	e2 0f       	add	r30, r18
 184:	f3 1f       	adc	r31, r19
 186:	90 81       	ld	r25, Z
 188:	98 13       	cpse	r25, r24
 18a:	03 c0       	rjmp	.+6      	; 0x192 <A_CheckAnswer+0x40>
	{
		A_RightAnswer();
 18c:	0e 94 53 00 	call	0xa6	; 0xa6 <A_RightAnswer>
 190:	02 c0       	rjmp	.+4      	; 0x196 <A_CheckAnswer+0x44>
	}
	else
	{
		A_WrongAnswer();
 192:	0e 94 6e 00 	call	0xdc	; 0xdc <A_WrongAnswer>
	}

}
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	0f 90       	pop	r0
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <A_Asking>:
u8 Local_u8_Min = 0;
u8 Local_u8_Sec = 0;
u8 Local_u8_Hour = 0;

void A_Asking(void)
{
 1a6:	cf 93       	push	r28
	H_Lcd_ClockDisplay(Local_u8_Hour,Local_u8_Min,Local_u8_Sec);
 1a8:	40 91 c9 00 	lds	r20, 0x00C9	; 0x8000c9 <Local_u8_Sec>
 1ac:	60 91 ca 00 	lds	r22, 0x00CA	; 0x8000ca <Local_u8_Min>
 1b0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__data_end>
 1b4:	0e 94 de 03 	call	0x7bc	; 0x7bc <H_Lcd_ClockDisplay>
	u8 Local_u8_Answer = 1;
	H_Lcd_GoTo(0,0);
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	0e 94 c6 03 	call	0x78c	; 0x78c <H_Lcd_GoTo>
	H_Lcd_WriteStr("Q");
 1c0:	86 e9       	ldi	r24, 0x96	; 150
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 f5 01 	call	0x3ea	; 0x3ea <H_Lcd_WriteStr>
	H_Lcd_WriteChar(Local_u8_Qnum+48);
 1c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1cc:	80 5d       	subi	r24, 0xD0	; 208
 1ce:	0e 94 a9 01 	call	0x352	; 0x352 <H_Lcd_WriteChar>
	H_Lcd_GoTo(1,3);
 1d2:	63 e0       	ldi	r22, 0x03	; 3
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 c6 03 	call	0x78c	; 0x78c <H_Lcd_GoTo>
	H_Lcd_WriteStr("A  B  C  D");
 1da:	88 e9       	ldi	r24, 0x98	; 152
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 f5 01 	call	0x3ea	; 0x3ea <H_Lcd_WriteStr>
u8 Local_u8_Hour = 0;

void A_Asking(void)
{
	H_Lcd_ClockDisplay(Local_u8_Hour,Local_u8_Min,Local_u8_Sec);
	u8 Local_u8_Answer = 1;
 1e2:	c1 e0       	ldi	r28, 0x01	; 1
	H_Lcd_GoTo(0,0);
	H_Lcd_WriteStr("Q");
	H_Lcd_WriteChar(Local_u8_Qnum+48);
	H_Lcd_GoTo(1,3);
	H_Lcd_WriteStr("A  B  C  D");
	while(Local_u8_Answer != 0)
 1e4:	15 c0       	rjmp	.+42     	; 0x210 <A_Asking+0x6a>
	{
		Local_u8_Answer = H_PushButton_Read(PUSHBUTTON_1);
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 94 04 	call	0x928	; 0x928 <H_PushButton_Read>
		if (Local_u8_Answer==0)
 1ec:	88 23       	and	r24, r24
 1ee:	99 f0       	breq	.+38     	; 0x216 <A_Asking+0x70>
		{
			Local_u8_Answer = A;
			break;
		}
		Local_u8_Answer = H_PushButton_Read(PUSHBUTTON_2);
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	0e 94 94 04 	call	0x928	; 0x928 <H_PushButton_Read>
		if (Local_u8_Answer==0)
 1f6:	88 23       	and	r24, r24
 1f8:	81 f0       	breq	.+32     	; 0x21a <A_Asking+0x74>
		{
			Local_u8_Answer = B;
			break;
		}
		Local_u8_Answer = H_PushButton_Read(PUSHBUTTON_3);
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	0e 94 94 04 	call	0x928	; 0x928 <H_PushButton_Read>
		if (Local_u8_Answer==0)
 200:	88 23       	and	r24, r24
 202:	69 f0       	breq	.+26     	; 0x21e <A_Asking+0x78>
		{
			Local_u8_Answer = C;
			break;
		}
		Local_u8_Answer = H_PushButton_Read(PUSHBUTTON_4);
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	0e 94 94 04 	call	0x928	; 0x928 <H_PushButton_Read>
 20a:	c8 2f       	mov	r28, r24
		if (Local_u8_Answer==0)
 20c:	88 23       	and	r24, r24
 20e:	49 f0       	breq	.+18     	; 0x222 <A_Asking+0x7c>
	H_Lcd_GoTo(0,0);
	H_Lcd_WriteStr("Q");
	H_Lcd_WriteChar(Local_u8_Qnum+48);
	H_Lcd_GoTo(1,3);
	H_Lcd_WriteStr("A  B  C  D");
	while(Local_u8_Answer != 0)
 210:	c1 11       	cpse	r28, r1
 212:	e9 cf       	rjmp	.-46     	; 0x1e6 <A_Asking+0x40>
 214:	07 c0       	rjmp	.+14     	; 0x224 <A_Asking+0x7e>
	{
		Local_u8_Answer = H_PushButton_Read(PUSHBUTTON_1);
		if (Local_u8_Answer==0)
		{
			Local_u8_Answer = A;
 216:	c1 e0       	ldi	r28, 0x01	; 1
 218:	05 c0       	rjmp	.+10     	; 0x224 <A_Asking+0x7e>
			break;
		}
		Local_u8_Answer = H_PushButton_Read(PUSHBUTTON_2);
		if (Local_u8_Answer==0)
		{
			Local_u8_Answer = B;
 21a:	c2 e0       	ldi	r28, 0x02	; 2
 21c:	03 c0       	rjmp	.+6      	; 0x224 <A_Asking+0x7e>
			break;
		}
		Local_u8_Answer = H_PushButton_Read(PUSHBUTTON_3);
		if (Local_u8_Answer==0)
		{
			Local_u8_Answer = C;
 21e:	c3 e0       	ldi	r28, 0x03	; 3
 220:	01 c0       	rjmp	.+2      	; 0x224 <A_Asking+0x7e>
			break;
		}
		Local_u8_Answer = H_PushButton_Read(PUSHBUTTON_4);
		if (Local_u8_Answer==0)
		{
			Local_u8_Answer = D;
 222:	c4 e0       	ldi	r28, 0x04	; 4
			break;
		}
	
	}
	H_Lcd_Clr();
 224:	0e 94 c2 03 	call	0x784	; 0x784 <H_Lcd_Clr>
	A_CheckAnswer(Local_u8_Answer);
 228:	8c 2f       	mov	r24, r28
 22a:	0e 94 a9 00 	call	0x152	; 0x152 <A_CheckAnswer>
}
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <A_manage_time>:
}

void A_manage_time(void)
{
	
	if (Local_u8_Sec < 59 )
 232:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <Local_u8_Sec>
 236:	8b 33       	cpi	r24, 0x3B	; 59
 238:	20 f4       	brcc	.+8      	; 0x242 <A_manage_time+0x10>
	{
		Local_u8_Sec++;
 23a:	8f 5f       	subi	r24, 0xFF	; 255
 23c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <Local_u8_Sec>
 240:	07 c0       	rjmp	.+14     	; 0x250 <A_manage_time+0x1e>
	}
	else
	{
		Local_u8_Sec =0;
 242:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <Local_u8_Sec>
		Local_u8_Min++;
 246:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <Local_u8_Min>
 24a:	8f 5f       	subi	r24, 0xFF	; 255
 24c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <Local_u8_Min>
	}
	H_Lcd_ClockDisplay(Local_u8_Hour,Local_u8_Min,Local_u8_Sec);
 250:	40 91 c9 00 	lds	r20, 0x00C9	; 0x8000c9 <Local_u8_Sec>
 254:	60 91 ca 00 	lds	r22, 0x00CA	; 0x8000ca <Local_u8_Min>
 258:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__data_end>
 25c:	0e 94 de 03 	call	0x7bc	; 0x7bc <H_Lcd_ClockDisplay>
 260:	08 95       	ret

00000262 <main>:
#include "App.h"

int main(void)
{
	u8 i=0;
	H_Lcd_Init();
 262:	0e 94 54 02 	call	0x4a8	; 0x4a8 <H_Lcd_Init>
	H_Buzzer_Init();
 266:	0e 94 84 01 	call	0x308	; 0x308 <H_Buzzer_Init>
	H_PushButton_Init(PUSHBUTTON_1);
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 55 04 	call	0x8aa	; 0x8aa <H_PushButton_Init>
	H_PushButton_Init(PUSHBUTTON_2);
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	0e 94 55 04 	call	0x8aa	; 0x8aa <H_PushButton_Init>
	H_PushButton_Init(PUSHBUTTON_3);
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	0e 94 55 04 	call	0x8aa	; 0x8aa <H_PushButton_Init>
	H_PushButton_Init(PUSHBUTTON_4);
 27c:	84 e0       	ldi	r24, 0x04	; 4
 27e:	0e 94 55 04 	call	0x8aa	; 0x8aa <H_PushButton_Init>
	Setbit(SREG,7);
 282:	8f b7       	in	r24, 0x3f	; 63
 284:	80 68       	ori	r24, 0x80	; 128
 286:	8f bf       	out	0x3f, r24	; 63
	M_Timer0_vIntEnable(TIMER0_OVF_INT_ID);
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <M_Timer0_vIntEnable>
	M_Timer0_vSetCallBack(A_manage_time , TIMER0_OVF_INT_ID);
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	89 e1       	ldi	r24, 0x19	; 25
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	0e 94 0e 06 	call	0xc1c	; 0xc1c <M_Timer0_vSetCallBack>
	
	H_Lcd_GoTo(0,1);
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 c6 03 	call	0x78c	; 0x78c <H_Lcd_GoTo>
	H_Lcd_WriteStr("Welcome ");
 2a0:	83 ea       	ldi	r24, 0xA3	; 163
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 f5 01 	call	0x3ea	; 0x3ea <H_Lcd_WriteStr>
 2a8:	2f ef       	ldi	r18, 0xFF	; 255
 2aa:	87 ea       	ldi	r24, 0xA7	; 167
 2ac:	91 e6       	ldi	r25, 0x61	; 97
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	80 40       	sbci	r24, 0x00	; 0
 2b2:	90 40       	sbci	r25, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0x4c>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <main+0x56>
 2b8:	00 00       	nop
	_delay_ms(2000);
	H_Lcd_Clr();
 2ba:	0e 94 c2 03 	call	0x784	; 0x784 <H_Lcd_Clr>
	H_Lcd_GoTo(0,3);
 2be:	63 e0       	ldi	r22, 0x03	; 3
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	0e 94 c6 03 	call	0x78c	; 0x78c <H_Lcd_GoTo>
	H_Lcd_WriteStr("Start Game");
 2c6:	8c ea       	ldi	r24, 0xAC	; 172
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 f5 01 	call	0x3ea	; 0x3ea <H_Lcd_WriteStr>
 2ce:	2f ef       	ldi	r18, 0xFF	; 255
 2d0:	87 ea       	ldi	r24, 0xA7	; 167
 2d2:	91 e6       	ldi	r25, 0x61	; 97
 2d4:	21 50       	subi	r18, 0x01	; 1
 2d6:	80 40       	sbci	r24, 0x00	; 0
 2d8:	90 40       	sbci	r25, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0x72>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x7c>
 2de:	00 00       	nop
	_delay_ms(2000);
	H_Lcd_Clr();
 2e0:	0e 94 c2 03 	call	0x784	; 0x784 <H_Lcd_Clr>
	M_Timer0_vStart();
 2e4:	0e 94 07 06 	call	0xc0e	; 0xc0e <M_Timer0_vStart>
	
	for (i=0;i<5;i++)
 2e8:	c0 e0       	ldi	r28, 0x00	; 0
 2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <main+0x90>
	{
		A_Asking();
 2ec:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <A_Asking>
	H_Lcd_WriteStr("Start Game");
	_delay_ms(2000);
	H_Lcd_Clr();
	M_Timer0_vStart();
	
	for (i=0;i<5;i++)
 2f0:	cf 5f       	subi	r28, 0xFF	; 255
 2f2:	c5 30       	cpi	r28, 0x05	; 5
 2f4:	d8 f3       	brcs	.-10     	; 0x2ec <main+0x8a>
	{
		A_Asking();
		
	}
	H_Lcd_GoTo(1,0);
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0e 94 c6 03 	call	0x78c	; 0x78c <H_Lcd_GoTo>
	H_Lcd_WriteStr("Congratulations ");
 2fe:	87 eb       	ldi	r24, 0xB7	; 183
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 f5 01 	call	0x3ea	; 0x3ea <H_Lcd_WriteStr>
 306:	ff cf       	rjmp	.-2      	; 0x306 <main+0xa4>

00000308 <H_Buzzer_Init>:

void H_Buzzer_OnceLong(void)
{
	M_Dio_PinWrite(BUZZER_PIN,HIGH);
	_delay_ms(120);
	M_Dio_PinWrite(BUZZER_PIN,LOW);
 308:	61 e0       	ldi	r22, 0x01	; 1
 30a:	83 e2       	ldi	r24, 0x23	; 35
 30c:	0e 94 b1 04 	call	0x962	; 0x962 <M_Dio_PinMode>
 310:	08 95       	ret

00000312 <H_Buzzer_Once>:
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	83 e2       	ldi	r24, 0x23	; 35
 316:	0e 94 3a 05 	call	0xa74	; 0xa74 <M_Dio_PinWrite>
 31a:	2f ef       	ldi	r18, 0xFF	; 255
 31c:	8d ee       	ldi	r24, 0xED	; 237
 31e:	92 e0       	ldi	r25, 0x02	; 2
 320:	21 50       	subi	r18, 0x01	; 1
 322:	80 40       	sbci	r24, 0x00	; 0
 324:	90 40       	sbci	r25, 0x00	; 0
 326:	e1 f7       	brne	.-8      	; 0x320 <H_Buzzer_Once+0xe>
 328:	00 c0       	rjmp	.+0      	; 0x32a <H_Buzzer_Once+0x18>
 32a:	00 00       	nop
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	83 e2       	ldi	r24, 0x23	; 35
 330:	0e 94 3a 05 	call	0xa74	; 0xa74 <M_Dio_PinWrite>
 334:	08 95       	ret

00000336 <H_Buzzer_Twice>:
}
void H_Buzzer_Twice(void)
{
	H_Buzzer_Once();
 336:	0e 94 89 01 	call	0x312	; 0x312 <H_Buzzer_Once>
 33a:	2f ef       	ldi	r18, 0xFF	; 255
 33c:	8d ee       	ldi	r24, 0xED	; 237
 33e:	92 e0       	ldi	r25, 0x02	; 2
 340:	21 50       	subi	r18, 0x01	; 1
 342:	80 40       	sbci	r24, 0x00	; 0
 344:	90 40       	sbci	r25, 0x00	; 0
 346:	e1 f7       	brne	.-8      	; 0x340 <H_Buzzer_Twice+0xa>
 348:	00 c0       	rjmp	.+0      	; 0x34a <H_Buzzer_Twice+0x14>
 34a:	00 00       	nop
	_delay_ms(60);
	H_Buzzer_Once();
 34c:	0e 94 89 01 	call	0x312	; 0x312 <H_Buzzer_Once>
 350:	08 95       	ret

00000352 <H_Lcd_WriteChar>:
	if (flag == 1)
	{
		H_Lcd_WriteChar('.');
		H_Lcd_WriteNum(Local_f64_Num);
	}
}
 352:	cf 93       	push	r28
 354:	c8 2f       	mov	r28, r24
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	8b e0       	ldi	r24, 0x0B	; 11
 35a:	0e 94 3a 05 	call	0xa74	; 0xa74 <M_Dio_PinWrite>
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	8c e0       	ldi	r24, 0x0C	; 12
 362:	0e 94 3a 05 	call	0xa74	; 0xa74 <M_Dio_PinWrite>
 366:	8b b3       	in	r24, 0x1b	; 27
 368:	87 78       	andi	r24, 0x87	; 135
 36a:	8b bb       	out	0x1b, r24	; 27
 36c:	9b b3       	in	r25, 0x1b	; 27
 36e:	8c 2f       	mov	r24, r28
 370:	86 95       	lsr	r24
 372:	88 77       	andi	r24, 0x78	; 120
 374:	89 2b       	or	r24, r25
 376:	8b bb       	out	0x1b, r24	; 27
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	8c e0       	ldi	r24, 0x0C	; 12
 37c:	0e 94 3a 05 	call	0xa74	; 0xa74 <M_Dio_PinWrite>
 380:	8f e9       	ldi	r24, 0x9F	; 159
 382:	9f e0       	ldi	r25, 0x0F	; 15
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <H_Lcd_WriteChar+0x32>
 388:	00 c0       	rjmp	.+0      	; 0x38a <H_Lcd_WriteChar+0x38>
 38a:	00 00       	nop
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	8c e0       	ldi	r24, 0x0C	; 12
 390:	0e 94 3a 05 	call	0xa74	; 0xa74 <M_Dio_PinWrite>
 394:	8f e9       	ldi	r24, 0x9F	; 159
 396:	9f e0       	ldi	r25, 0x0F	; 15
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <H_Lcd_WriteChar+0x46>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <H_Lcd_WriteChar+0x4c>
 39e:	00 00       	nop
 3a0:	8b b3       	in	r24, 0x1b	; 27
 3a2:	87 78       	andi	r24, 0x87	; 135
 3a4:	8b bb       	out	0x1b, r24	; 27
 3a6:	2b b3       	in	r18, 0x1b	; 27
 3a8:	8c 2f       	mov	r24, r28
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	88 77       	andi	r24, 0x78	; 120
 3ba:	82 2b       	or	r24, r18
 3bc:	8b bb       	out	0x1b, r24	; 27
 3be:	61 e0       	ldi	r22, 0x01	; 1
 3c0:	8c e0       	ldi	r24, 0x0C	; 12
 3c2:	0e 94 3a 05 	call	0xa74	; 0xa74 <M_Dio_PinWrite>
 3c6:	8f e9       	ldi	r24, 0x9F	; 159
 3c8:	9f e0       	ldi	r25, 0x0F	; 15
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <H_Lcd_WriteChar+0x78>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <H_Lcd_WriteChar+0x7e>
 3d0:	00 00       	nop
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	8c e0       	ldi	r24, 0x0C	; 12
 3d6:	0e 94 3a 05 	call	0xa74	; 0xa74 <M_Dio_PinWrite>
 3da:	8f e9       	ldi	r24, 0x9F	; 159
 3dc:	9f e0       	ldi	r25, 0x0F	; 15
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <H_Lcd_WriteChar+0x8c>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <H_Lcd_WriteChar+0x92>
 3e4:	00 00       	nop
 3e6:	cf 91       	pop	r28
 3e8:	08 95       	ret

000003ea <H_Lcd_WriteStr>:
 3ea:	0f 93       	push	r16
 3ec:	1f 93       	push	r17
 3ee:	cf 93       	push	r28
 3f0:	8c 01       	movw	r16, r24
 3f2:	c0 e0       	ldi	r28, 0x00	; 0
 3f4:	03 c0       	rjmp	.+6      	; 0x3fc <H_Lcd_WriteStr+0x12>
 3f6:	0e 94 a9 01 	call	0x352	; 0x352 <H_Lcd_WriteChar>
 3fa:	cf 5f       	subi	r28, 0xFF	; 255
 3fc:	f8 01       	movw	r30, r16
 3fe:	ec 0f       	add	r30, r28
 400:	f1 1d       	adc	r31, r1
 402:	80 81       	ld	r24, Z
 404:	81 11       	cpse	r24, r1
 406:	f7 cf       	rjmp	.-18     	; 0x3f6 <H_Lcd_WriteStr+0xc>
 408:	cf 91       	pop	r28
 40a:	1f 91       	pop	r17
 40c:	0f 91       	pop	r16
 40e:	08 95       	ret

00000410 <H_Lcd_writeCommand>:
 410:	cf 93       	push	r28
 412:	c8 2f       	mov	r28, r24
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	8b e0       	ldi	r24, 0x0B	; 11
 418:	0e 94 3a 05 	call	0xa74	; 0xa74 <M_Dio_PinWrite>
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	8c e0       	ldi	r24, 0x0C	; 12
 420:	0e 94 3a 05 	call	0xa74	; 0xa74 <M_Dio_PinWrite>
 424:	8b b3       	in	r24, 0x1b	; 27
 426:	87 78       	andi	r24, 0x87	; 135
 428:	8b bb       	out	0x1b, r24	; 27
 42a:	9b b3       	in	r25, 0x1b	; 27
 42c:	8c 2f       	mov	r24, r28
 42e:	86 95       	lsr	r24
 430:	88 77       	andi	r24, 0x78	; 120
 432:	89 2b       	or	r24, r25
 434:	8b bb       	out	0x1b, r24	; 27
 436:	61 e0       	ldi	r22, 0x01	; 1
 438:	8c e0       	ldi	r24, 0x0C	; 12
 43a:	0e 94 3a 05 	call	0xa74	; 0xa74 <M_Dio_PinWrite>
 43e:	8f e9       	ldi	r24, 0x9F	; 159
 440:	9f e0       	ldi	r25, 0x0F	; 15
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <H_Lcd_writeCommand+0x32>
 446:	00 c0       	rjmp	.+0      	; 0x448 <H_Lcd_writeCommand+0x38>
 448:	00 00       	nop
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	8c e0       	ldi	r24, 0x0C	; 12
 44e:	0e 94 3a 05 	call	0xa74	; 0xa74 <M_Dio_PinWrite>
 452:	8f e9       	ldi	r24, 0x9F	; 159
 454:	9f e0       	ldi	r25, 0x0F	; 15
 456:	01 97       	sbiw	r24, 0x01	; 1
 458:	f1 f7       	brne	.-4      	; 0x456 <H_Lcd_writeCommand+0x46>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <H_Lcd_writeCommand+0x4c>
 45c:	00 00       	nop
 45e:	8b b3       	in	r24, 0x1b	; 27
 460:	87 78       	andi	r24, 0x87	; 135
 462:	8b bb       	out	0x1b, r24	; 27
 464:	2b b3       	in	r18, 0x1b	; 27
 466:	8c 2f       	mov	r24, r28
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	88 77       	andi	r24, 0x78	; 120
 478:	82 2b       	or	r24, r18
 47a:	8b bb       	out	0x1b, r24	; 27
 47c:	61 e0       	ldi	r22, 0x01	; 1
 47e:	8c e0       	ldi	r24, 0x0C	; 12
 480:	0e 94 3a 05 	call	0xa74	; 0xa74 <M_Dio_PinWrite>
 484:	8f e9       	ldi	r24, 0x9F	; 159
 486:	9f e0       	ldi	r25, 0x0F	; 15
 488:	01 97       	sbiw	r24, 0x01	; 1
 48a:	f1 f7       	brne	.-4      	; 0x488 <H_Lcd_writeCommand+0x78>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <H_Lcd_writeCommand+0x7e>
 48e:	00 00       	nop
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	8c e0       	ldi	r24, 0x0C	; 12
 494:	0e 94 3a 05 	call	0xa74	; 0xa74 <M_Dio_PinWrite>
 498:	8f e9       	ldi	r24, 0x9F	; 159
 49a:	9f e0       	ldi	r25, 0x0F	; 15
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <H_Lcd_writeCommand+0x8c>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <H_Lcd_writeCommand+0x92>
 4a2:	00 00       	nop
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <H_Lcd_Init>:
 4a8:	61 e0       	ldi	r22, 0x01	; 1
 4aa:	8c e0       	ldi	r24, 0x0C	; 12
 4ac:	0e 94 b1 04 	call	0x962	; 0x962 <M_Dio_PinMode>
 4b0:	61 e0       	ldi	r22, 0x01	; 1
 4b2:	8b e0       	ldi	r24, 0x0B	; 11
 4b4:	0e 94 b1 04 	call	0x962	; 0x962 <M_Dio_PinMode>
 4b8:	8f e3       	ldi	r24, 0x3F	; 63
 4ba:	9f e1       	ldi	r25, 0x1F	; 31
 4bc:	01 97       	sbiw	r24, 0x01	; 1
 4be:	f1 f7       	brne	.-4      	; 0x4bc <H_Lcd_Init+0x14>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <H_Lcd_Init+0x1a>
 4c2:	00 00       	nop
 4c4:	8a b3       	in	r24, 0x1a	; 26
 4c6:	88 67       	ori	r24, 0x78	; 120
 4c8:	8a bb       	out	0x1a, r24	; 26
 4ca:	8c e2       	ldi	r24, 0x2C	; 44
 4cc:	0e 94 08 02 	call	0x410	; 0x410 <H_Lcd_writeCommand>
 4d0:	8c e0       	ldi	r24, 0x0C	; 12
 4d2:	0e 94 08 02 	call	0x410	; 0x410 <H_Lcd_writeCommand>
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	0e 94 08 02 	call	0x410	; 0x410 <H_Lcd_writeCommand>
 4dc:	82 e0       	ldi	r24, 0x02	; 2
 4de:	0e 94 08 02 	call	0x410	; 0x410 <H_Lcd_writeCommand>
 4e2:	08 95       	ret

000004e4 <H_Lcd_WriteNum>:
 4e4:	2f 92       	push	r2
 4e6:	3f 92       	push	r3
 4e8:	4f 92       	push	r4
 4ea:	5f 92       	push	r5
 4ec:	6f 92       	push	r6
 4ee:	7f 92       	push	r7
 4f0:	8f 92       	push	r8
 4f2:	9f 92       	push	r9
 4f4:	af 92       	push	r10
 4f6:	bf 92       	push	r11
 4f8:	cf 92       	push	r12
 4fa:	df 92       	push	r13
 4fc:	ef 92       	push	r14
 4fe:	ff 92       	push	r15
 500:	0f 93       	push	r16
 502:	1f 93       	push	r17
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	cd b7       	in	r28, 0x3d	; 61
 50a:	de b7       	in	r29, 0x3e	; 62
 50c:	60 97       	sbiw	r28, 0x10	; 16
 50e:	0f b6       	in	r0, 0x3f	; 63
 510:	f8 94       	cli
 512:	de bf       	out	0x3e, r29	; 62
 514:	0f be       	out	0x3f, r0	; 63
 516:	cd bf       	out	0x3d, r28	; 61
 518:	2c 83       	std	Y+4, r18	; 0x04
 51a:	3d 83       	std	Y+5, r19	; 0x05
 51c:	4e 83       	std	Y+6, r20	; 0x06
 51e:	5f 83       	std	Y+7, r21	; 0x07
 520:	68 87       	std	Y+8, r22	; 0x08
 522:	79 87       	std	Y+9, r23	; 0x09
 524:	8a 87       	std	Y+10, r24	; 0x0a
 526:	9b 87       	std	Y+11, r25	; 0x0b
 528:	a0 e0       	ldi	r26, 0x00	; 0
 52a:	0e 94 11 07 	call	0xe22	; 0xe22 <__cmpdi2_s8>
 52e:	09 f0       	breq	.+2      	; 0x532 <H_Lcd_WriteNum+0x4e>
 530:	52 c0       	rjmp	.+164    	; 0x5d6 <H_Lcd_WriteNum+0xf2>
 532:	80 e3       	ldi	r24, 0x30	; 48
 534:	0e 94 a9 01 	call	0x352	; 0x352 <H_Lcd_WriteChar>
 538:	0c c1       	rjmp	.+536    	; 0x752 <H_Lcd_WriteNum+0x26e>
 53a:	2f 85       	ldd	r18, Y+15	; 0x0f
 53c:	3c 85       	ldd	r19, Y+12	; 0x0c
 53e:	48 2d       	mov	r20, r8
 540:	57 2d       	mov	r21, r7
 542:	66 2d       	mov	r22, r6
 544:	75 2d       	mov	r23, r5
 546:	84 2d       	mov	r24, r4
 548:	9b 81       	ldd	r25, Y+3	; 0x03
 54a:	01 e0       	ldi	r16, 0x01	; 1
 54c:	0e 94 ef 06 	call	0xdde	; 0xdde <__ashldi3>
 550:	42 2e       	mov	r4, r18
 552:	53 2e       	mov	r5, r19
 554:	64 2e       	mov	r6, r20
 556:	75 2e       	mov	r7, r21
 558:	86 2e       	mov	r8, r22
 55a:	7c 87       	std	Y+12, r23	; 0x0c
 55c:	8b 83       	std	Y+3, r24	; 0x03
 55e:	a9 2f       	mov	r26, r25
 560:	02 e0       	ldi	r16, 0x02	; 2
 562:	0e 94 ef 06 	call	0xdde	; 0xdde <__ashldi3>
 566:	a2 2e       	mov	r10, r18
 568:	b3 2e       	mov	r11, r19
 56a:	c4 2e       	mov	r12, r20
 56c:	d5 2e       	mov	r13, r21
 56e:	e6 2e       	mov	r14, r22
 570:	f7 2e       	mov	r15, r23
 572:	08 2f       	mov	r16, r24
 574:	19 2f       	mov	r17, r25
 576:	24 2d       	mov	r18, r4
 578:	35 2d       	mov	r19, r5
 57a:	46 2d       	mov	r20, r6
 57c:	57 2d       	mov	r21, r7
 57e:	68 2d       	mov	r22, r8
 580:	7c 85       	ldd	r23, Y+12	; 0x0c
 582:	8b 81       	ldd	r24, Y+3	; 0x03
 584:	9a 2f       	mov	r25, r26
 586:	0e 94 08 07 	call	0xe10	; 0xe10 <__adddi3>
 58a:	2f 87       	std	Y+15, r18	; 0x0f
 58c:	3c 87       	std	Y+12, r19	; 0x0c
 58e:	84 2e       	mov	r8, r20
 590:	75 2e       	mov	r7, r21
 592:	66 2e       	mov	r6, r22
 594:	57 2e       	mov	r5, r23
 596:	48 2e       	mov	r4, r24
 598:	9b 83       	std	Y+3, r25	; 0x03
 59a:	0f 2e       	mov	r0, r31
 59c:	fa e0       	ldi	r31, 0x0A	; 10
 59e:	af 2e       	mov	r10, r31
 5a0:	f0 2d       	mov	r31, r0
 5a2:	b1 2c       	mov	r11, r1
 5a4:	c1 2c       	mov	r12, r1
 5a6:	d1 2c       	mov	r13, r1
 5a8:	e1 2c       	mov	r14, r1
 5aa:	f1 2c       	mov	r15, r1
 5ac:	00 e0       	ldi	r16, 0x00	; 0
 5ae:	10 e0       	ldi	r17, 0x00	; 0
 5b0:	2f 2f       	mov	r18, r31
 5b2:	3e 2f       	mov	r19, r30
 5b4:	42 2d       	mov	r20, r2
 5b6:	59 81       	ldd	r21, Y+1	; 0x01
 5b8:	6a 81       	ldd	r22, Y+2	; 0x02
 5ba:	73 2d       	mov	r23, r3
 5bc:	89 2d       	mov	r24, r9
 5be:	9b 2f       	mov	r25, r27
 5c0:	0e 94 92 06 	call	0xd24	; 0xd24 <__udivdi3>
 5c4:	f2 2f       	mov	r31, r18
 5c6:	e3 2f       	mov	r30, r19
 5c8:	24 2e       	mov	r2, r20
 5ca:	59 83       	std	Y+1, r21	; 0x01
 5cc:	6a 83       	std	Y+2, r22	; 0x02
 5ce:	37 2e       	mov	r3, r23
 5d0:	98 2e       	mov	r9, r24
 5d2:	b9 2f       	mov	r27, r25
 5d4:	16 c0       	rjmp	.+44     	; 0x602 <H_Lcd_WriteNum+0x11e>
 5d6:	fc 81       	ldd	r31, Y+4	; 0x04
 5d8:	ed 81       	ldd	r30, Y+5	; 0x05
 5da:	8e 81       	ldd	r24, Y+6	; 0x06
 5dc:	9f 81       	ldd	r25, Y+7	; 0x07
 5de:	99 83       	std	Y+1, r25	; 0x01
 5e0:	98 85       	ldd	r25, Y+8	; 0x08
 5e2:	9a 83       	std	Y+2, r25	; 0x02
 5e4:	29 84       	ldd	r2, Y+9	; 0x09
 5e6:	9a 84       	ldd	r9, Y+10	; 0x0a
 5e8:	bb 85       	ldd	r27, Y+11	; 0x0b
 5ea:	91 e0       	ldi	r25, 0x01	; 1
 5ec:	1c 86       	std	Y+12, r1	; 0x0c
 5ee:	81 2c       	mov	r8, r1
 5f0:	71 2c       	mov	r7, r1
 5f2:	61 2c       	mov	r6, r1
 5f4:	51 2c       	mov	r5, r1
 5f6:	41 2c       	mov	r4, r1
 5f8:	31 2c       	mov	r3, r1
 5fa:	9f 87       	std	Y+15, r25	; 0x0f
 5fc:	3b 82       	std	Y+3, r3	; 0x03
 5fe:	32 2c       	mov	r3, r2
 600:	28 2e       	mov	r2, r24
 602:	2f 2f       	mov	r18, r31
 604:	3e 2f       	mov	r19, r30
 606:	42 2d       	mov	r20, r2
 608:	59 81       	ldd	r21, Y+1	; 0x01
 60a:	6a 81       	ldd	r22, Y+2	; 0x02
 60c:	73 2d       	mov	r23, r3
 60e:	89 2d       	mov	r24, r9
 610:	9b 2f       	mov	r25, r27
 612:	a0 e0       	ldi	r26, 0x00	; 0
 614:	0e 94 11 07 	call	0xe22	; 0xe22 <__cmpdi2_s8>
 618:	09 f0       	breq	.+2      	; 0x61c <H_Lcd_WriteNum+0x138>
 61a:	8f cf       	rjmp	.-226    	; 0x53a <H_Lcd_WriteNum+0x56>
 61c:	8f 85       	ldd	r24, Y+15	; 0x0f
 61e:	9c 85       	ldd	r25, Y+12	; 0x0c
 620:	3b 80       	ldd	r3, Y+3	; 0x03
 622:	29 2e       	mov	r2, r25
 624:	89 82       	std	Y+1, r8	; 0x01
 626:	7a 82       	std	Y+2, r7	; 0x02
 628:	6b 82       	std	Y+3, r6	; 0x03
 62a:	5c 86       	std	Y+12, r5	; 0x0c
 62c:	4d 86       	std	Y+13, r4	; 0x0d
 62e:	3e 86       	std	Y+14, r3	; 0x0e
 630:	38 2e       	mov	r3, r24
 632:	82 c0       	rjmp	.+260    	; 0x738 <H_Lcd_WriteNum+0x254>
 634:	0f 2e       	mov	r0, r31
 636:	fa e0       	ldi	r31, 0x0A	; 10
 638:	af 2e       	mov	r10, r31
 63a:	f0 2d       	mov	r31, r0
 63c:	b1 2c       	mov	r11, r1
 63e:	c1 2c       	mov	r12, r1
 640:	d1 2c       	mov	r13, r1
 642:	e1 2c       	mov	r14, r1
 644:	f1 2c       	mov	r15, r1
 646:	00 e0       	ldi	r16, 0x00	; 0
 648:	10 e0       	ldi	r17, 0x00	; 0
 64a:	23 2d       	mov	r18, r3
 64c:	32 2d       	mov	r19, r2
 64e:	49 81       	ldd	r20, Y+1	; 0x01
 650:	5a 81       	ldd	r21, Y+2	; 0x02
 652:	6b 81       	ldd	r22, Y+3	; 0x03
 654:	7c 85       	ldd	r23, Y+12	; 0x0c
 656:	8d 85       	ldd	r24, Y+13	; 0x0d
 658:	9e 85       	ldd	r25, Y+14	; 0x0e
 65a:	0e 94 92 06 	call	0xd24	; 0xd24 <__udivdi3>
 65e:	42 2e       	mov	r4, r18
 660:	53 2e       	mov	r5, r19
 662:	64 2e       	mov	r6, r20
 664:	75 2e       	mov	r7, r21
 666:	86 2e       	mov	r8, r22
 668:	97 2e       	mov	r9, r23
 66a:	88 8b       	std	Y+16, r24	; 0x10
 66c:	9f 87       	std	Y+15, r25	; 0x0f
 66e:	32 2e       	mov	r3, r18
 670:	23 2e       	mov	r2, r19
 672:	49 83       	std	Y+1, r20	; 0x01
 674:	5a 83       	std	Y+2, r21	; 0x02
 676:	6b 83       	std	Y+3, r22	; 0x03
 678:	7c 87       	std	Y+12, r23	; 0x0c
 67a:	8d 87       	std	Y+13, r24	; 0x0d
 67c:	9e 87       	std	Y+14, r25	; 0x0e
 67e:	a2 2e       	mov	r10, r18
 680:	b3 2e       	mov	r11, r19
 682:	c4 2e       	mov	r12, r20
 684:	d5 2e       	mov	r13, r21
 686:	e6 2e       	mov	r14, r22
 688:	f7 2e       	mov	r15, r23
 68a:	08 2f       	mov	r16, r24
 68c:	19 2f       	mov	r17, r25
 68e:	2c 81       	ldd	r18, Y+4	; 0x04
 690:	3d 81       	ldd	r19, Y+5	; 0x05
 692:	4e 81       	ldd	r20, Y+6	; 0x06
 694:	5f 81       	ldd	r21, Y+7	; 0x07
 696:	68 85       	ldd	r22, Y+8	; 0x08
 698:	79 85       	ldd	r23, Y+9	; 0x09
 69a:	8a 85       	ldd	r24, Y+10	; 0x0a
 69c:	9b 85       	ldd	r25, Y+11	; 0x0b
 69e:	0e 94 92 06 	call	0xd24	; 0xd24 <__udivdi3>
 6a2:	82 2f       	mov	r24, r18
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	8a 30       	cpi	r24, 0x0A	; 10
 6a8:	91 05       	cpc	r25, r1
 6aa:	60 f5       	brcc	.+88     	; 0x704 <H_Lcd_WriteNum+0x220>
 6ac:	fc 01       	movw	r30, r24
 6ae:	e6 5d       	subi	r30, 0xD6	; 214
 6b0:	ff 4f       	sbci	r31, 0xFF	; 255
 6b2:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__tablejump2__>
 6b6:	80 e3       	ldi	r24, 0x30	; 48
 6b8:	0e 94 a9 01 	call	0x352	; 0x352 <H_Lcd_WriteChar>
 6bc:	23 c0       	rjmp	.+70     	; 0x704 <H_Lcd_WriteNum+0x220>
 6be:	81 e3       	ldi	r24, 0x31	; 49
 6c0:	0e 94 a9 01 	call	0x352	; 0x352 <H_Lcd_WriteChar>
 6c4:	1f c0       	rjmp	.+62     	; 0x704 <H_Lcd_WriteNum+0x220>
 6c6:	82 e3       	ldi	r24, 0x32	; 50
 6c8:	0e 94 a9 01 	call	0x352	; 0x352 <H_Lcd_WriteChar>
 6cc:	1b c0       	rjmp	.+54     	; 0x704 <H_Lcd_WriteNum+0x220>
 6ce:	83 e3       	ldi	r24, 0x33	; 51
 6d0:	0e 94 a9 01 	call	0x352	; 0x352 <H_Lcd_WriteChar>
 6d4:	17 c0       	rjmp	.+46     	; 0x704 <H_Lcd_WriteNum+0x220>
 6d6:	84 e3       	ldi	r24, 0x34	; 52
 6d8:	0e 94 a9 01 	call	0x352	; 0x352 <H_Lcd_WriteChar>
 6dc:	13 c0       	rjmp	.+38     	; 0x704 <H_Lcd_WriteNum+0x220>
 6de:	85 e3       	ldi	r24, 0x35	; 53
 6e0:	0e 94 a9 01 	call	0x352	; 0x352 <H_Lcd_WriteChar>
 6e4:	0f c0       	rjmp	.+30     	; 0x704 <H_Lcd_WriteNum+0x220>
 6e6:	86 e3       	ldi	r24, 0x36	; 54
 6e8:	0e 94 a9 01 	call	0x352	; 0x352 <H_Lcd_WriteChar>
 6ec:	0b c0       	rjmp	.+22     	; 0x704 <H_Lcd_WriteNum+0x220>
 6ee:	87 e3       	ldi	r24, 0x37	; 55
 6f0:	0e 94 a9 01 	call	0x352	; 0x352 <H_Lcd_WriteChar>
 6f4:	07 c0       	rjmp	.+14     	; 0x704 <H_Lcd_WriteNum+0x220>
 6f6:	88 e3       	ldi	r24, 0x38	; 56
 6f8:	0e 94 a9 01 	call	0x352	; 0x352 <H_Lcd_WriteChar>
 6fc:	03 c0       	rjmp	.+6      	; 0x704 <H_Lcd_WriteNum+0x220>
 6fe:	89 e3       	ldi	r24, 0x39	; 57
 700:	0e 94 a9 01 	call	0x352	; 0x352 <H_Lcd_WriteChar>
 704:	a4 2c       	mov	r10, r4
 706:	b5 2c       	mov	r11, r5
 708:	c6 2c       	mov	r12, r6
 70a:	d7 2c       	mov	r13, r7
 70c:	e8 2c       	mov	r14, r8
 70e:	f9 2c       	mov	r15, r9
 710:	08 89       	ldd	r16, Y+16	; 0x10
 712:	1f 85       	ldd	r17, Y+15	; 0x0f
 714:	2c 81       	ldd	r18, Y+4	; 0x04
 716:	3d 81       	ldd	r19, Y+5	; 0x05
 718:	4e 81       	ldd	r20, Y+6	; 0x06
 71a:	5f 81       	ldd	r21, Y+7	; 0x07
 71c:	68 85       	ldd	r22, Y+8	; 0x08
 71e:	79 85       	ldd	r23, Y+9	; 0x09
 720:	8a 85       	ldd	r24, Y+10	; 0x0a
 722:	9b 85       	ldd	r25, Y+11	; 0x0b
 724:	0e 94 90 06 	call	0xd20	; 0xd20 <__umoddi3>
 728:	2c 83       	std	Y+4, r18	; 0x04
 72a:	3d 83       	std	Y+5, r19	; 0x05
 72c:	4e 83       	std	Y+6, r20	; 0x06
 72e:	5f 83       	std	Y+7, r21	; 0x07
 730:	68 87       	std	Y+8, r22	; 0x08
 732:	79 87       	std	Y+9, r23	; 0x09
 734:	8a 87       	std	Y+10, r24	; 0x0a
 736:	9b 87       	std	Y+11, r25	; 0x0b
 738:	23 2d       	mov	r18, r3
 73a:	32 2d       	mov	r19, r2
 73c:	49 81       	ldd	r20, Y+1	; 0x01
 73e:	5a 81       	ldd	r21, Y+2	; 0x02
 740:	6b 81       	ldd	r22, Y+3	; 0x03
 742:	7c 85       	ldd	r23, Y+12	; 0x0c
 744:	8d 85       	ldd	r24, Y+13	; 0x0d
 746:	9e 85       	ldd	r25, Y+14	; 0x0e
 748:	a0 e0       	ldi	r26, 0x00	; 0
 74a:	0e 94 11 07 	call	0xe22	; 0xe22 <__cmpdi2_s8>
 74e:	09 f0       	breq	.+2      	; 0x752 <H_Lcd_WriteNum+0x26e>
 750:	71 cf       	rjmp	.-286    	; 0x634 <H_Lcd_WriteNum+0x150>
 752:	60 96       	adiw	r28, 0x10	; 16
 754:	0f b6       	in	r0, 0x3f	; 63
 756:	f8 94       	cli
 758:	de bf       	out	0x3e, r29	; 62
 75a:	0f be       	out	0x3f, r0	; 63
 75c:	cd bf       	out	0x3d, r28	; 61
 75e:	df 91       	pop	r29
 760:	cf 91       	pop	r28
 762:	1f 91       	pop	r17
 764:	0f 91       	pop	r16
 766:	ff 90       	pop	r15
 768:	ef 90       	pop	r14
 76a:	df 90       	pop	r13
 76c:	cf 90       	pop	r12
 76e:	bf 90       	pop	r11
 770:	af 90       	pop	r10
 772:	9f 90       	pop	r9
 774:	8f 90       	pop	r8
 776:	7f 90       	pop	r7
 778:	6f 90       	pop	r6
 77a:	5f 90       	pop	r5
 77c:	4f 90       	pop	r4
 77e:	3f 90       	pop	r3
 780:	2f 90       	pop	r2
 782:	08 95       	ret

00000784 <H_Lcd_Clr>:

//============================================================

void H_Lcd_Clr(void)
{
	H_Lcd_writeCommand(LCD_CLR);
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	0e 94 08 02 	call	0x410	; 0x410 <H_Lcd_writeCommand>
 78a:	08 95       	ret

0000078c <H_Lcd_GoTo>:
}

//================================================
void H_Lcd_GoTo(u8 Local_u8_Row ,u8 Local_u8_Col)
{
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
 790:	00 d0       	rcall	.+0      	; 0x792 <H_Lcd_GoTo+0x6>
 792:	cd b7       	in	r28, 0x3d	; 61
 794:	de b7       	in	r29, 0x3e	; 62
	// the two rows in the array
	u8 Local_u8_Arr[2] = {0x80 , 0xC0};
 796:	90 e8       	ldi	r25, 0x80	; 128
 798:	99 83       	std	Y+1, r25	; 0x01
 79a:	90 ec       	ldi	r25, 0xC0	; 192
 79c:	9a 83       	std	Y+2, r25	; 0x02
   // after select the row add the number of column on it
	H_Lcd_writeCommand(Local_u8_Arr[Local_u8_Row] + Local_u8_Col);
 79e:	e1 e0       	ldi	r30, 0x01	; 1
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	ec 0f       	add	r30, r28
 7a4:	fd 1f       	adc	r31, r29
 7a6:	e8 0f       	add	r30, r24
 7a8:	f1 1d       	adc	r31, r1
 7aa:	80 81       	ld	r24, Z
 7ac:	86 0f       	add	r24, r22
 7ae:	0e 94 08 02 	call	0x410	; 0x410 <H_Lcd_writeCommand>
}
 7b2:	0f 90       	pop	r0
 7b4:	0f 90       	pop	r0
 7b6:	df 91       	pop	r29
 7b8:	cf 91       	pop	r28
 7ba:	08 95       	ret

000007bc <H_Lcd_ClockDisplay>:

//===========================================
void H_Lcd_ClockDisplay(u8 Hour,u8 Min,u8 Sec)
{
 7bc:	1f 93       	push	r17
 7be:	cf 93       	push	r28
 7c0:	df 93       	push	r29
 7c2:	18 2f       	mov	r17, r24
 7c4:	d6 2f       	mov	r29, r22
 7c6:	c4 2f       	mov	r28, r20
	H_Lcd_GoTo(0,4);
 7c8:	64 e0       	ldi	r22, 0x04	; 4
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	0e 94 c6 03 	call	0x78c	; 0x78c <H_Lcd_GoTo>
	if (Hour>9)
 7d0:	1a 30       	cpi	r17, 0x0A	; 10
 7d2:	58 f0       	brcs	.+22     	; 0x7ea <H_Lcd_ClockDisplay+0x2e>
	{
		H_Lcd_WriteNum(Hour);
 7d4:	21 2f       	mov	r18, r17
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	40 e0       	ldi	r20, 0x00	; 0
 7da:	50 e0       	ldi	r21, 0x00	; 0
 7dc:	60 e0       	ldi	r22, 0x00	; 0
 7de:	70 e0       	ldi	r23, 0x00	; 0
 7e0:	80 e0       	ldi	r24, 0x00	; 0
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0e 94 72 02 	call	0x4e4	; 0x4e4 <H_Lcd_WriteNum>
 7e8:	14 c0       	rjmp	.+40     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
	}
	else
	{
		H_Lcd_WriteNum(0);
 7ea:	20 e0       	ldi	r18, 0x00	; 0
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	40 e0       	ldi	r20, 0x00	; 0
 7f0:	50 e0       	ldi	r21, 0x00	; 0
 7f2:	60 e0       	ldi	r22, 0x00	; 0
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	0e 94 72 02 	call	0x4e4	; 0x4e4 <H_Lcd_WriteNum>
		H_Lcd_WriteNum(Hour);
 7fe:	21 2f       	mov	r18, r17
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	40 e0       	ldi	r20, 0x00	; 0
 804:	50 e0       	ldi	r21, 0x00	; 0
 806:	60 e0       	ldi	r22, 0x00	; 0
 808:	70 e0       	ldi	r23, 0x00	; 0
 80a:	80 e0       	ldi	r24, 0x00	; 0
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <H_Lcd_WriteNum>
	}
	H_Lcd_WriteChar(':');
 812:	8a e3       	ldi	r24, 0x3A	; 58
 814:	0e 94 a9 01 	call	0x352	; 0x352 <H_Lcd_WriteChar>
	if (Min>9)
 818:	da 30       	cpi	r29, 0x0A	; 10
 81a:	58 f0       	brcs	.+22     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
	{
		H_Lcd_WriteNum(Min);
 81c:	2d 2f       	mov	r18, r29
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	40 e0       	ldi	r20, 0x00	; 0
 822:	50 e0       	ldi	r21, 0x00	; 0
 824:	60 e0       	ldi	r22, 0x00	; 0
 826:	70 e0       	ldi	r23, 0x00	; 0
 828:	80 e0       	ldi	r24, 0x00	; 0
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <H_Lcd_WriteNum>
 830:	14 c0       	rjmp	.+40     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
	}
	else
	{
		H_Lcd_WriteNum(0);
 832:	20 e0       	ldi	r18, 0x00	; 0
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	40 e0       	ldi	r20, 0x00	; 0
 838:	50 e0       	ldi	r21, 0x00	; 0
 83a:	60 e0       	ldi	r22, 0x00	; 0
 83c:	70 e0       	ldi	r23, 0x00	; 0
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	0e 94 72 02 	call	0x4e4	; 0x4e4 <H_Lcd_WriteNum>
		H_Lcd_WriteNum(Min);
 846:	2d 2f       	mov	r18, r29
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	40 e0       	ldi	r20, 0x00	; 0
 84c:	50 e0       	ldi	r21, 0x00	; 0
 84e:	60 e0       	ldi	r22, 0x00	; 0
 850:	70 e0       	ldi	r23, 0x00	; 0
 852:	80 e0       	ldi	r24, 0x00	; 0
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	0e 94 72 02 	call	0x4e4	; 0x4e4 <H_Lcd_WriteNum>
	}
	H_Lcd_WriteChar(':');
 85a:	8a e3       	ldi	r24, 0x3A	; 58
 85c:	0e 94 a9 01 	call	0x352	; 0x352 <H_Lcd_WriteChar>
	if (Sec>9)
 860:	ca 30       	cpi	r28, 0x0A	; 10
 862:	58 f0       	brcs	.+22     	; 0x87a <__stack+0x1b>
	{
		H_Lcd_WriteNum(Sec);
 864:	2c 2f       	mov	r18, r28
 866:	30 e0       	ldi	r19, 0x00	; 0
 868:	40 e0       	ldi	r20, 0x00	; 0
 86a:	50 e0       	ldi	r21, 0x00	; 0
 86c:	60 e0       	ldi	r22, 0x00	; 0
 86e:	70 e0       	ldi	r23, 0x00	; 0
 870:	80 e0       	ldi	r24, 0x00	; 0
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	0e 94 72 02 	call	0x4e4	; 0x4e4 <H_Lcd_WriteNum>
 878:	14 c0       	rjmp	.+40     	; 0x8a2 <__stack+0x43>
	}
	else
	{
		H_Lcd_WriteNum(0);
 87a:	20 e0       	ldi	r18, 0x00	; 0
 87c:	30 e0       	ldi	r19, 0x00	; 0
 87e:	40 e0       	ldi	r20, 0x00	; 0
 880:	50 e0       	ldi	r21, 0x00	; 0
 882:	60 e0       	ldi	r22, 0x00	; 0
 884:	70 e0       	ldi	r23, 0x00	; 0
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <H_Lcd_WriteNum>
		H_Lcd_WriteNum(Sec);
 88e:	2c 2f       	mov	r18, r28
 890:	30 e0       	ldi	r19, 0x00	; 0
 892:	40 e0       	ldi	r20, 0x00	; 0
 894:	50 e0       	ldi	r21, 0x00	; 0
 896:	60 e0       	ldi	r22, 0x00	; 0
 898:	70 e0       	ldi	r23, 0x00	; 0
 89a:	80 e0       	ldi	r24, 0x00	; 0
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <H_Lcd_WriteNum>
	}
	
}
 8a2:	df 91       	pop	r29
 8a4:	cf 91       	pop	r28
 8a6:	1f 91       	pop	r17
 8a8:	08 95       	ret

000008aa <H_PushButton_Init>:

#include "Pushbutton.h"

void H_PushButton_Init(u8 Local_u8_PUSHBUTTON)
{
	switch (Local_u8_PUSHBUTTON)
 8aa:	82 30       	cpi	r24, 0x02	; 2
 8ac:	71 f0       	breq	.+28     	; 0x8ca <H_PushButton_Init+0x20>
 8ae:	18 f4       	brcc	.+6      	; 0x8b6 <H_PushButton_Init+0xc>
 8b0:	81 30       	cpi	r24, 0x01	; 1
 8b2:	31 f0       	breq	.+12     	; 0x8c0 <H_PushButton_Init+0x16>
 8b4:	08 95       	ret
 8b6:	83 30       	cpi	r24, 0x03	; 3
 8b8:	69 f0       	breq	.+26     	; 0x8d4 <H_PushButton_Init+0x2a>
 8ba:	84 30       	cpi	r24, 0x04	; 4
 8bc:	81 f0       	breq	.+32     	; 0x8de <H_PushButton_Init+0x34>
 8be:	08 95       	ret
	{
		case PUSHBUTTON_1 :	M_Dio_PinMode(PUSHBUTTON1_PIN , INPUT); break;
 8c0:	60 e0       	ldi	r22, 0x00	; 0
 8c2:	8a e2       	ldi	r24, 0x2A	; 42
 8c4:	0e 94 b1 04 	call	0x962	; 0x962 <M_Dio_PinMode>
 8c8:	08 95       	ret
		case PUSHBUTTON_2 :	M_Dio_PinMode(PUSHBUTTON2_PIN , INPUT); break;
 8ca:	60 e0       	ldi	r22, 0x00	; 0
 8cc:	8b e2       	ldi	r24, 0x2B	; 43
 8ce:	0e 94 b1 04 	call	0x962	; 0x962 <M_Dio_PinMode>
 8d2:	08 95       	ret
		case PUSHBUTTON_3 :	M_Dio_PinMode(PUSHBUTTON3_PIN , INPUT); break;
 8d4:	60 e0       	ldi	r22, 0x00	; 0
 8d6:	8c e2       	ldi	r24, 0x2C	; 44
 8d8:	0e 94 b1 04 	call	0x962	; 0x962 <M_Dio_PinMode>
 8dc:	08 95       	ret
		case PUSHBUTTON_4 :	M_Dio_PinMode(PUSHBUTTON4_PIN , INPUT); break;
 8de:	60 e0       	ldi	r22, 0x00	; 0
 8e0:	8d e2       	ldi	r24, 0x2D	; 45
 8e2:	0e 94 b1 04 	call	0x962	; 0x962 <M_Dio_PinMode>
 8e6:	08 95       	ret

000008e8 <H_PushButton_Read_Pin>:
}


//===================================================== 
u8 H_PushButton_Read_Pin(u8 Local_u8_PUSHBUTTON_Pin)
{
 8e8:	cf 93       	push	r28
 8ea:	c8 2f       	mov	r28, r24
	  u8 Local_u8_Reading = RELEASED;
		
		if(M_Dio_PinGet(Local_u8_PUSHBUTTON_Pin) == PRESSED)
 8ec:	0e 94 c3 05 	call	0xb86	; 0xb86 <M_Dio_PinGet>
 8f0:	81 11       	cpse	r24, r1
 8f2:	15 c0       	rjmp	.+42     	; 0x91e <H_PushButton_Read_Pin+0x36>
 8f4:	2f ef       	ldi	r18, 0xFF	; 255
 8f6:	81 ee       	ldi	r24, 0xE1	; 225
 8f8:	94 e0       	ldi	r25, 0x04	; 4
 8fa:	21 50       	subi	r18, 0x01	; 1
 8fc:	80 40       	sbci	r24, 0x00	; 0
 8fe:	90 40       	sbci	r25, 0x00	; 0
 900:	e1 f7       	brne	.-8      	; 0x8fa <H_PushButton_Read_Pin+0x12>
 902:	00 c0       	rjmp	.+0      	; 0x904 <H_PushButton_Read_Pin+0x1c>
 904:	00 00       	nop
		{
			_delay_ms(BLINK_TIME); // to solve the bouncing problem
			if ( M_Dio_PinGet(Local_u8_PUSHBUTTON_Pin) == PRESSED)
 906:	8c 2f       	mov	r24, r28
 908:	0e 94 c3 05 	call	0xb86	; 0xb86 <M_Dio_PinGet>
 90c:	81 11       	cpse	r24, r1
 90e:	09 c0       	rjmp	.+18     	; 0x922 <H_PushButton_Read_Pin+0x3a>
			{
				Local_u8_Reading = PRESSED;
				//if the button still pressed hold until released
				while( M_Dio_PinGet(PUSHBUTTON1_PIN) == PRESSED);
 910:	8a e2       	ldi	r24, 0x2A	; 42
 912:	0e 94 c3 05 	call	0xb86	; 0xb86 <M_Dio_PinGet>
 916:	88 23       	and	r24, r24
 918:	d9 f3       	breq	.-10     	; 0x910 <H_PushButton_Read_Pin+0x28>
		if(M_Dio_PinGet(Local_u8_PUSHBUTTON_Pin) == PRESSED)
		{
			_delay_ms(BLINK_TIME); // to solve the bouncing problem
			if ( M_Dio_PinGet(Local_u8_PUSHBUTTON_Pin) == PRESSED)
			{
				Local_u8_Reading = PRESSED;
 91a:	80 e0       	ldi	r24, 0x00	; 0
 91c:	03 c0       	rjmp	.+6      	; 0x924 <H_PushButton_Read_Pin+0x3c>


//===================================================== 
u8 H_PushButton_Read_Pin(u8 Local_u8_PUSHBUTTON_Pin)
{
	  u8 Local_u8_Reading = RELEASED;
 91e:	81 e0       	ldi	r24, 0x01	; 1
 920:	01 c0       	rjmp	.+2      	; 0x924 <H_PushButton_Read_Pin+0x3c>
 922:	81 e0       	ldi	r24, 0x01	; 1
				//if the button still pressed hold until released
				while( M_Dio_PinGet(PUSHBUTTON1_PIN) == PRESSED);
			}
		}
	return 	Local_u8_Reading;
 924:	cf 91       	pop	r28
 926:	08 95       	ret

00000928 <H_PushButton_Read>:

//--------------------------------------------------------------------------
u8 H_PushButton_Read(u8 Local_u8_PUSHBUTTON)
{
	u8 Local_u8_Reading = RELEASED;
	switch (Local_u8_PUSHBUTTON)
 928:	82 30       	cpi	r24, 0x02	; 2
 92a:	69 f0       	breq	.+26     	; 0x946 <H_PushButton_Read+0x1e>
 92c:	18 f4       	brcc	.+6      	; 0x934 <H_PushButton_Read+0xc>
 92e:	81 30       	cpi	r24, 0x01	; 1
 930:	31 f0       	breq	.+12     	; 0x93e <H_PushButton_Read+0x16>
 932:	15 c0       	rjmp	.+42     	; 0x95e <H_PushButton_Read+0x36>
 934:	83 30       	cpi	r24, 0x03	; 3
 936:	59 f0       	breq	.+22     	; 0x94e <H_PushButton_Read+0x26>
 938:	84 30       	cpi	r24, 0x04	; 4
 93a:	69 f0       	breq	.+26     	; 0x956 <H_PushButton_Read+0x2e>
 93c:	10 c0       	rjmp	.+32     	; 0x95e <H_PushButton_Read+0x36>
	{
		case PUSHBUTTON_1 : Local_u8_Reading=H_PushButton_Read_Pin(PUSHBUTTON1_PIN);  break;
 93e:	8a e2       	ldi	r24, 0x2A	; 42
 940:	0e 94 74 04 	call	0x8e8	; 0x8e8 <H_PushButton_Read_Pin>
 944:	08 95       	ret
		case PUSHBUTTON_2 : Local_u8_Reading=H_PushButton_Read_Pin(PUSHBUTTON2_PIN);  break;
 946:	8b e2       	ldi	r24, 0x2B	; 43
 948:	0e 94 74 04 	call	0x8e8	; 0x8e8 <H_PushButton_Read_Pin>
 94c:	08 95       	ret
		case PUSHBUTTON_3 :	Local_u8_Reading=H_PushButton_Read_Pin(PUSHBUTTON3_PIN);  break;
 94e:	8c e2       	ldi	r24, 0x2C	; 44
 950:	0e 94 74 04 	call	0x8e8	; 0x8e8 <H_PushButton_Read_Pin>
 954:	08 95       	ret
        case PUSHBUTTON_4 : Local_u8_Reading=H_PushButton_Read_Pin(PUSHBUTTON4_PIN);  break;
 956:	8d e2       	ldi	r24, 0x2D	; 45
 958:	0e 94 74 04 	call	0x8e8	; 0x8e8 <H_PushButton_Read_Pin>
 95c:	08 95       	ret
}

//--------------------------------------------------------------------------
u8 H_PushButton_Read(u8 Local_u8_PUSHBUTTON)
{
	u8 Local_u8_Reading = RELEASED;
 95e:	81 e0       	ldi	r24, 0x01	; 1
		case PUSHBUTTON_3 :	Local_u8_Reading=H_PushButton_Read_Pin(PUSHBUTTON3_PIN);  break;
        case PUSHBUTTON_4 : Local_u8_Reading=H_PushButton_Read_Pin(PUSHBUTTON4_PIN);  break;
		default:																	  break;
	}
	return Local_u8_Reading;
}
 960:	08 95       	ret

00000962 <M_Dio_PinMode>:
	switch(local_u8_Port) // select the port
	{
		case PORT_A:	Togbit(PORTA,Local_u8_Pin);	 break;
		case PORT_B:	Togbit(PORTB,Local_u8_Pin);	 break;
		case PORT_C:	Togbit(PORTC,Local_u8_Pin);	 break;
		case PORT_D:	Togbit(PORTD,Local_u8_Pin);	 break;
 962:	9d ec       	ldi	r25, 0xCD	; 205
 964:	89 9f       	mul	r24, r25
 966:	91 2d       	mov	r25, r1
 968:	11 24       	eor	r1, r1
 96a:	29 2f       	mov	r18, r25
 96c:	26 95       	lsr	r18
 96e:	26 95       	lsr	r18
 970:	26 95       	lsr	r18
 972:	22 0f       	add	r18, r18
 974:	32 2f       	mov	r19, r18
 976:	33 0f       	add	r19, r19
 978:	33 0f       	add	r19, r19
 97a:	23 0f       	add	r18, r19
 97c:	82 1b       	sub	r24, r18
 97e:	28 2f       	mov	r18, r24
 980:	96 95       	lsr	r25
 982:	96 95       	lsr	r25
 984:	96 95       	lsr	r25
 986:	66 23       	and	r22, r22
 988:	19 f0       	breq	.+6      	; 0x990 <M_Dio_PinMode+0x2e>
 98a:	61 30       	cpi	r22, 0x01	; 1
 98c:	e1 f1       	breq	.+120    	; 0xa06 <M_Dio_PinMode+0xa4>
 98e:	08 95       	ret
 990:	92 30       	cpi	r25, 0x02	; 2
 992:	a9 f0       	breq	.+42     	; 0x9be <M_Dio_PinMode+0x5c>
 994:	18 f4       	brcc	.+6      	; 0x99c <M_Dio_PinMode+0x3a>
 996:	91 30       	cpi	r25, 0x01	; 1
 998:	31 f0       	breq	.+12     	; 0x9a6 <M_Dio_PinMode+0x44>
 99a:	08 95       	ret
 99c:	93 30       	cpi	r25, 0x03	; 3
 99e:	d9 f0       	breq	.+54     	; 0x9d6 <M_Dio_PinMode+0x74>
 9a0:	94 30       	cpi	r25, 0x04	; 4
 9a2:	29 f1       	breq	.+74     	; 0x9ee <M_Dio_PinMode+0x8c>
 9a4:	08 95       	ret
 9a6:	3a b3       	in	r19, 0x1a	; 26
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <M_Dio_PinMode+0x50>
 9ae:	88 0f       	add	r24, r24
 9b0:	99 1f       	adc	r25, r25
 9b2:	2a 95       	dec	r18
 9b4:	e2 f7       	brpl	.-8      	; 0x9ae <M_Dio_PinMode+0x4c>
 9b6:	80 95       	com	r24
 9b8:	83 23       	and	r24, r19
 9ba:	8a bb       	out	0x1a, r24	; 26
 9bc:	08 95       	ret
 9be:	37 b3       	in	r19, 0x17	; 23
 9c0:	81 e0       	ldi	r24, 0x01	; 1
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <M_Dio_PinMode+0x68>
 9c6:	88 0f       	add	r24, r24
 9c8:	99 1f       	adc	r25, r25
 9ca:	2a 95       	dec	r18
 9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <M_Dio_PinMode+0x64>
 9ce:	80 95       	com	r24
 9d0:	83 23       	and	r24, r19
 9d2:	87 bb       	out	0x17, r24	; 23
 9d4:	08 95       	ret
 9d6:	34 b3       	in	r19, 0x14	; 20
 9d8:	81 e0       	ldi	r24, 0x01	; 1
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <M_Dio_PinMode+0x80>
 9de:	88 0f       	add	r24, r24
 9e0:	99 1f       	adc	r25, r25
 9e2:	2a 95       	dec	r18
 9e4:	e2 f7       	brpl	.-8      	; 0x9de <M_Dio_PinMode+0x7c>
 9e6:	80 95       	com	r24
 9e8:	83 23       	and	r24, r19
 9ea:	84 bb       	out	0x14, r24	; 20
 9ec:	08 95       	ret
 9ee:	31 b3       	in	r19, 0x11	; 17
 9f0:	81 e0       	ldi	r24, 0x01	; 1
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	02 c0       	rjmp	.+4      	; 0x9fa <M_Dio_PinMode+0x98>
 9f6:	88 0f       	add	r24, r24
 9f8:	99 1f       	adc	r25, r25
 9fa:	2a 95       	dec	r18
 9fc:	e2 f7       	brpl	.-8      	; 0x9f6 <M_Dio_PinMode+0x94>
 9fe:	80 95       	com	r24
 a00:	83 23       	and	r24, r19
 a02:	81 bb       	out	0x11, r24	; 17
 a04:	08 95       	ret
 a06:	92 30       	cpi	r25, 0x02	; 2
 a08:	a1 f0       	breq	.+40     	; 0xa32 <M_Dio_PinMode+0xd0>
 a0a:	18 f4       	brcc	.+6      	; 0xa12 <M_Dio_PinMode+0xb0>
 a0c:	91 30       	cpi	r25, 0x01	; 1
 a0e:	31 f0       	breq	.+12     	; 0xa1c <M_Dio_PinMode+0xba>
 a10:	08 95       	ret
 a12:	93 30       	cpi	r25, 0x03	; 3
 a14:	c9 f0       	breq	.+50     	; 0xa48 <M_Dio_PinMode+0xe6>
 a16:	94 30       	cpi	r25, 0x04	; 4
 a18:	11 f1       	breq	.+68     	; 0xa5e <M_Dio_PinMode+0xfc>
 a1a:	08 95       	ret
 a1c:	3a b3       	in	r19, 0x1a	; 26
 a1e:	81 e0       	ldi	r24, 0x01	; 1
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	02 c0       	rjmp	.+4      	; 0xa28 <M_Dio_PinMode+0xc6>
 a24:	88 0f       	add	r24, r24
 a26:	99 1f       	adc	r25, r25
 a28:	2a 95       	dec	r18
 a2a:	e2 f7       	brpl	.-8      	; 0xa24 <M_Dio_PinMode+0xc2>
 a2c:	83 2b       	or	r24, r19
 a2e:	8a bb       	out	0x1a, r24	; 26
 a30:	08 95       	ret
 a32:	37 b3       	in	r19, 0x17	; 23
 a34:	81 e0       	ldi	r24, 0x01	; 1
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	02 c0       	rjmp	.+4      	; 0xa3e <M_Dio_PinMode+0xdc>
 a3a:	88 0f       	add	r24, r24
 a3c:	99 1f       	adc	r25, r25
 a3e:	2a 95       	dec	r18
 a40:	e2 f7       	brpl	.-8      	; 0xa3a <M_Dio_PinMode+0xd8>
 a42:	83 2b       	or	r24, r19
 a44:	87 bb       	out	0x17, r24	; 23
 a46:	08 95       	ret
 a48:	34 b3       	in	r19, 0x14	; 20
 a4a:	81 e0       	ldi	r24, 0x01	; 1
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	02 c0       	rjmp	.+4      	; 0xa54 <M_Dio_PinMode+0xf2>
 a50:	88 0f       	add	r24, r24
 a52:	99 1f       	adc	r25, r25
 a54:	2a 95       	dec	r18
 a56:	e2 f7       	brpl	.-8      	; 0xa50 <M_Dio_PinMode+0xee>
 a58:	83 2b       	or	r24, r19
 a5a:	84 bb       	out	0x14, r24	; 20
 a5c:	08 95       	ret
 a5e:	31 b3       	in	r19, 0x11	; 17
 a60:	81 e0       	ldi	r24, 0x01	; 1
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	02 c0       	rjmp	.+4      	; 0xa6a <M_Dio_PinMode+0x108>
 a66:	88 0f       	add	r24, r24
 a68:	99 1f       	adc	r25, r25
 a6a:	2a 95       	dec	r18
 a6c:	e2 f7       	brpl	.-8      	; 0xa66 <M_Dio_PinMode+0x104>
 a6e:	83 2b       	or	r24, r19
 a70:	81 bb       	out	0x11, r24	; 17
 a72:	08 95       	ret

00000a74 <M_Dio_PinWrite>:
 a74:	9d ec       	ldi	r25, 0xCD	; 205
 a76:	89 9f       	mul	r24, r25
 a78:	91 2d       	mov	r25, r1
 a7a:	11 24       	eor	r1, r1
 a7c:	29 2f       	mov	r18, r25
 a7e:	26 95       	lsr	r18
 a80:	26 95       	lsr	r18
 a82:	26 95       	lsr	r18
 a84:	22 0f       	add	r18, r18
 a86:	32 2f       	mov	r19, r18
 a88:	33 0f       	add	r19, r19
 a8a:	33 0f       	add	r19, r19
 a8c:	23 0f       	add	r18, r19
 a8e:	82 1b       	sub	r24, r18
 a90:	28 2f       	mov	r18, r24
 a92:	96 95       	lsr	r25
 a94:	96 95       	lsr	r25
 a96:	96 95       	lsr	r25
 a98:	66 23       	and	r22, r22
 a9a:	19 f0       	breq	.+6      	; 0xaa2 <M_Dio_PinWrite+0x2e>
 a9c:	61 30       	cpi	r22, 0x01	; 1
 a9e:	e1 f1       	breq	.+120    	; 0xb18 <M_Dio_PinWrite+0xa4>
 aa0:	08 95       	ret
 aa2:	92 30       	cpi	r25, 0x02	; 2
 aa4:	a9 f0       	breq	.+42     	; 0xad0 <M_Dio_PinWrite+0x5c>
 aa6:	18 f4       	brcc	.+6      	; 0xaae <M_Dio_PinWrite+0x3a>
 aa8:	91 30       	cpi	r25, 0x01	; 1
 aaa:	31 f0       	breq	.+12     	; 0xab8 <M_Dio_PinWrite+0x44>
 aac:	08 95       	ret
 aae:	93 30       	cpi	r25, 0x03	; 3
 ab0:	d9 f0       	breq	.+54     	; 0xae8 <M_Dio_PinWrite+0x74>
 ab2:	94 30       	cpi	r25, 0x04	; 4
 ab4:	29 f1       	breq	.+74     	; 0xb00 <M_Dio_PinWrite+0x8c>
 ab6:	08 95       	ret
 ab8:	3b b3       	in	r19, 0x1b	; 27
 aba:	81 e0       	ldi	r24, 0x01	; 1
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	02 c0       	rjmp	.+4      	; 0xac4 <M_Dio_PinWrite+0x50>
 ac0:	88 0f       	add	r24, r24
 ac2:	99 1f       	adc	r25, r25
 ac4:	2a 95       	dec	r18
 ac6:	e2 f7       	brpl	.-8      	; 0xac0 <M_Dio_PinWrite+0x4c>
 ac8:	80 95       	com	r24
 aca:	83 23       	and	r24, r19
 acc:	8b bb       	out	0x1b, r24	; 27
 ace:	08 95       	ret
 ad0:	38 b3       	in	r19, 0x18	; 24
 ad2:	81 e0       	ldi	r24, 0x01	; 1
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	02 c0       	rjmp	.+4      	; 0xadc <M_Dio_PinWrite+0x68>
 ad8:	88 0f       	add	r24, r24
 ada:	99 1f       	adc	r25, r25
 adc:	2a 95       	dec	r18
 ade:	e2 f7       	brpl	.-8      	; 0xad8 <M_Dio_PinWrite+0x64>
 ae0:	80 95       	com	r24
 ae2:	83 23       	and	r24, r19
 ae4:	88 bb       	out	0x18, r24	; 24
 ae6:	08 95       	ret
 ae8:	35 b3       	in	r19, 0x15	; 21
 aea:	81 e0       	ldi	r24, 0x01	; 1
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	02 c0       	rjmp	.+4      	; 0xaf4 <M_Dio_PinWrite+0x80>
 af0:	88 0f       	add	r24, r24
 af2:	99 1f       	adc	r25, r25
 af4:	2a 95       	dec	r18
 af6:	e2 f7       	brpl	.-8      	; 0xaf0 <M_Dio_PinWrite+0x7c>
 af8:	80 95       	com	r24
 afa:	83 23       	and	r24, r19
 afc:	85 bb       	out	0x15, r24	; 21
 afe:	08 95       	ret
 b00:	32 b3       	in	r19, 0x12	; 18
 b02:	81 e0       	ldi	r24, 0x01	; 1
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	02 c0       	rjmp	.+4      	; 0xb0c <M_Dio_PinWrite+0x98>
 b08:	88 0f       	add	r24, r24
 b0a:	99 1f       	adc	r25, r25
 b0c:	2a 95       	dec	r18
 b0e:	e2 f7       	brpl	.-8      	; 0xb08 <M_Dio_PinWrite+0x94>
 b10:	80 95       	com	r24
 b12:	83 23       	and	r24, r19
 b14:	82 bb       	out	0x12, r24	; 18
 b16:	08 95       	ret
 b18:	92 30       	cpi	r25, 0x02	; 2
 b1a:	a1 f0       	breq	.+40     	; 0xb44 <M_Dio_PinWrite+0xd0>
 b1c:	18 f4       	brcc	.+6      	; 0xb24 <M_Dio_PinWrite+0xb0>
 b1e:	91 30       	cpi	r25, 0x01	; 1
 b20:	31 f0       	breq	.+12     	; 0xb2e <M_Dio_PinWrite+0xba>
 b22:	08 95       	ret
 b24:	93 30       	cpi	r25, 0x03	; 3
 b26:	c9 f0       	breq	.+50     	; 0xb5a <M_Dio_PinWrite+0xe6>
 b28:	94 30       	cpi	r25, 0x04	; 4
 b2a:	11 f1       	breq	.+68     	; 0xb70 <M_Dio_PinWrite+0xfc>
 b2c:	08 95       	ret
 b2e:	3b b3       	in	r19, 0x1b	; 27
 b30:	81 e0       	ldi	r24, 0x01	; 1
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	02 c0       	rjmp	.+4      	; 0xb3a <M_Dio_PinWrite+0xc6>
 b36:	88 0f       	add	r24, r24
 b38:	99 1f       	adc	r25, r25
 b3a:	2a 95       	dec	r18
 b3c:	e2 f7       	brpl	.-8      	; 0xb36 <M_Dio_PinWrite+0xc2>
 b3e:	83 2b       	or	r24, r19
 b40:	8b bb       	out	0x1b, r24	; 27
 b42:	08 95       	ret
 b44:	38 b3       	in	r19, 0x18	; 24
 b46:	81 e0       	ldi	r24, 0x01	; 1
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	02 c0       	rjmp	.+4      	; 0xb50 <M_Dio_PinWrite+0xdc>
 b4c:	88 0f       	add	r24, r24
 b4e:	99 1f       	adc	r25, r25
 b50:	2a 95       	dec	r18
 b52:	e2 f7       	brpl	.-8      	; 0xb4c <M_Dio_PinWrite+0xd8>
 b54:	83 2b       	or	r24, r19
 b56:	88 bb       	out	0x18, r24	; 24
 b58:	08 95       	ret
 b5a:	35 b3       	in	r19, 0x15	; 21
 b5c:	81 e0       	ldi	r24, 0x01	; 1
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	02 c0       	rjmp	.+4      	; 0xb66 <M_Dio_PinWrite+0xf2>
 b62:	88 0f       	add	r24, r24
 b64:	99 1f       	adc	r25, r25
 b66:	2a 95       	dec	r18
 b68:	e2 f7       	brpl	.-8      	; 0xb62 <M_Dio_PinWrite+0xee>
 b6a:	83 2b       	or	r24, r19
 b6c:	85 bb       	out	0x15, r24	; 21
 b6e:	08 95       	ret
 b70:	32 b3       	in	r19, 0x12	; 18
 b72:	81 e0       	ldi	r24, 0x01	; 1
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	02 c0       	rjmp	.+4      	; 0xb7c <M_Dio_PinWrite+0x108>
 b78:	88 0f       	add	r24, r24
 b7a:	99 1f       	adc	r25, r25
 b7c:	2a 95       	dec	r18
 b7e:	e2 f7       	brpl	.-8      	; 0xb78 <M_Dio_PinWrite+0x104>
 b80:	83 2b       	or	r24, r19
 b82:	82 bb       	out	0x12, r24	; 18
 b84:	08 95       	ret

00000b86 <M_Dio_PinGet>:
//----------------------------------------------------------------------------

u8   M_Dio_PinGet(u8 Local_u8_num)
{
	// variable to select the pin number
	u8 Local_u8_Pin = Local_u8_num %10;
 b86:	9d ec       	ldi	r25, 0xCD	; 205
 b88:	89 9f       	mul	r24, r25
 b8a:	91 2d       	mov	r25, r1
 b8c:	11 24       	eor	r1, r1
 b8e:	29 2f       	mov	r18, r25
 b90:	26 95       	lsr	r18
 b92:	26 95       	lsr	r18
 b94:	26 95       	lsr	r18
 b96:	22 0f       	add	r18, r18
 b98:	32 2f       	mov	r19, r18
 b9a:	33 0f       	add	r19, r19
 b9c:	33 0f       	add	r19, r19
 b9e:	23 0f       	add	r18, r19
 ba0:	82 1b       	sub	r24, r18
 ba2:	28 2f       	mov	r18, r24
	// variable to select the port
	u8 local_u8_Port = Local_u8_num /10;
 ba4:	89 2f       	mov	r24, r25
 ba6:	86 95       	lsr	r24
 ba8:	86 95       	lsr	r24
 baa:	86 95       	lsr	r24
	
	u8 Local_u8_Reading = 0;
	switch(local_u8_Port) // select the port
 bac:	82 30       	cpi	r24, 0x02	; 2
 bae:	91 f0       	breq	.+36     	; 0xbd4 <M_Dio_PinGet+0x4e>
 bb0:	18 f4       	brcc	.+6      	; 0xbb8 <M_Dio_PinGet+0x32>
 bb2:	81 30       	cpi	r24, 0x01	; 1
 bb4:	31 f0       	breq	.+12     	; 0xbc2 <M_Dio_PinGet+0x3c>
 bb6:	29 c0       	rjmp	.+82     	; 0xc0a <M_Dio_PinGet+0x84>
 bb8:	83 30       	cpi	r24, 0x03	; 3
 bba:	a9 f0       	breq	.+42     	; 0xbe6 <M_Dio_PinGet+0x60>
 bbc:	84 30       	cpi	r24, 0x04	; 4
 bbe:	e1 f0       	breq	.+56     	; 0xbf8 <M_Dio_PinGet+0x72>
 bc0:	24 c0       	rjmp	.+72     	; 0xc0a <M_Dio_PinGet+0x84>
	{
		case PORT_A:Local_u8_Reading=Getbit(PINA,Local_u8_Pin);	 break;
 bc2:	89 b3       	in	r24, 0x19	; 25
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	02 c0       	rjmp	.+4      	; 0xbcc <M_Dio_PinGet+0x46>
 bc8:	95 95       	asr	r25
 bca:	87 95       	ror	r24
 bcc:	2a 95       	dec	r18
 bce:	e2 f7       	brpl	.-8      	; 0xbc8 <M_Dio_PinGet+0x42>
 bd0:	81 70       	andi	r24, 0x01	; 1
 bd2:	08 95       	ret
		case PORT_B:Local_u8_Reading=Getbit(PINB,Local_u8_Pin);	 break;
 bd4:	86 b3       	in	r24, 0x16	; 22
 bd6:	90 e0       	ldi	r25, 0x00	; 0
 bd8:	02 c0       	rjmp	.+4      	; 0xbde <M_Dio_PinGet+0x58>
 bda:	95 95       	asr	r25
 bdc:	87 95       	ror	r24
 bde:	2a 95       	dec	r18
 be0:	e2 f7       	brpl	.-8      	; 0xbda <M_Dio_PinGet+0x54>
 be2:	81 70       	andi	r24, 0x01	; 1
 be4:	08 95       	ret
		case PORT_C:Local_u8_Reading=Getbit(PINC,Local_u8_Pin);	 break;
 be6:	83 b3       	in	r24, 0x13	; 19
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	02 c0       	rjmp	.+4      	; 0xbf0 <M_Dio_PinGet+0x6a>
 bec:	95 95       	asr	r25
 bee:	87 95       	ror	r24
 bf0:	2a 95       	dec	r18
 bf2:	e2 f7       	brpl	.-8      	; 0xbec <M_Dio_PinGet+0x66>
 bf4:	81 70       	andi	r24, 0x01	; 1
 bf6:	08 95       	ret
		case PORT_D:Local_u8_Reading=Getbit(PIND,Local_u8_Pin);	 break;
 bf8:	80 b3       	in	r24, 0x10	; 16
 bfa:	90 e0       	ldi	r25, 0x00	; 0
 bfc:	02 c0       	rjmp	.+4      	; 0xc02 <M_Dio_PinGet+0x7c>
 bfe:	95 95       	asr	r25
 c00:	87 95       	ror	r24
 c02:	2a 95       	dec	r18
 c04:	e2 f7       	brpl	.-8      	; 0xbfe <M_Dio_PinGet+0x78>
 c06:	81 70       	andi	r24, 0x01	; 1
 c08:	08 95       	ret
	// variable to select the pin number
	u8 Local_u8_Pin = Local_u8_num %10;
	// variable to select the port
	u8 local_u8_Port = Local_u8_num /10;
	
	u8 Local_u8_Reading = 0;
 c0a:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_D:Local_u8_Reading=Getbit(PIND,Local_u8_Pin);	 break;
		default:													 break;
	}// switch port
	
	return Local_u8_Reading;
}
 c0c:	08 95       	ret

00000c0e <M_Timer0_vStart>:
	{
		case TIMER0_OVF_INT_ID:
			Clrbit(TIMER_TIMSK,TIMSK_OVIE);
		break;
		case TIMER0_CTC_INT_ID:
			Clrbit(TIMER_TIMSK,TIMSK_OCIE);
 c0e:	83 b7       	in	r24, 0x33	; 51
 c10:	88 7f       	andi	r24, 0xF8	; 248
 c12:	83 bf       	out	0x33, r24	; 51
 c14:	83 b7       	in	r24, 0x33	; 51
 c16:	85 60       	ori	r24, 0x05	; 5
 c18:	83 bf       	out	0x33, r24	; 51
 c1a:	08 95       	ret

00000c1c <M_Timer0_vSetCallBack>:
 c1c:	66 23       	and	r22, r22
 c1e:	19 f0       	breq	.+6      	; 0xc26 <M_Timer0_vSetCallBack+0xa>
 c20:	61 30       	cpi	r22, 0x01	; 1
 c22:	31 f0       	breq	.+12     	; 0xc30 <M_Timer0_vSetCallBack+0x14>
 c24:	08 95       	ret
 c26:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <pv_CallBackArr+0x1>
 c2a:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <pv_CallBackArr>
 c2e:	08 95       	ret
 c30:	90 93 d0 00 	sts	0x00D0, r25	; 0x8000d0 <pv_CallBackArr+0x3>
 c34:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <pv_CallBackArr+0x2>
 c38:	08 95       	ret

00000c3a <M_Timer0_vIntEnable>:
 c3a:	88 23       	and	r24, r24
 c3c:	19 f0       	breq	.+6      	; 0xc44 <M_Timer0_vIntEnable+0xa>
 c3e:	81 30       	cpi	r24, 0x01	; 1
 c40:	29 f0       	breq	.+10     	; 0xc4c <M_Timer0_vIntEnable+0x12>
 c42:	08 95       	ret
 c44:	89 b7       	in	r24, 0x39	; 57
 c46:	81 60       	ori	r24, 0x01	; 1
 c48:	89 bf       	out	0x39, r24	; 57
 c4a:	08 95       	ret
 c4c:	89 b7       	in	r24, 0x39	; 57
 c4e:	82 60       	ori	r24, 0x02	; 2
 c50:	89 bf       	out	0x39, r24	; 57
 c52:	08 95       	ret

00000c54 <__vector_10>:
}

//----------------------------------------------------------------------------------------------------------

ISR(TIMER0_COMP_vect)
{
 c54:	1f 92       	push	r1
 c56:	0f 92       	push	r0
 c58:	0f b6       	in	r0, 0x3f	; 63
 c5a:	0f 92       	push	r0
 c5c:	11 24       	eor	r1, r1
 c5e:	2f 93       	push	r18
 c60:	3f 93       	push	r19
 c62:	4f 93       	push	r20
 c64:	5f 93       	push	r21
 c66:	6f 93       	push	r22
 c68:	7f 93       	push	r23
 c6a:	8f 93       	push	r24
 c6c:	9f 93       	push	r25
 c6e:	af 93       	push	r26
 c70:	bf 93       	push	r27
 c72:	ef 93       	push	r30
 c74:	ff 93       	push	r31
	static u8 counter=0;
	counter++;
 c76:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <counter.1673>
 c7a:	8f 5f       	subi	r24, 0xFF	; 255
 c7c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <counter.1673>
	if (counter == 63)
 c80:	8f 33       	cpi	r24, 0x3F	; 63
 c82:	39 f4       	brne	.+14     	; 0xc92 <__vector_10+0x3e>
	{
		counter=0;
 c84:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <counter.1673>
		pv_CallBackArr[TIMER0_CTC_INT_ID]();
 c88:	e0 91 cf 00 	lds	r30, 0x00CF	; 0x8000cf <pv_CallBackArr+0x2>
 c8c:	f0 91 d0 00 	lds	r31, 0x00D0	; 0x8000d0 <pv_CallBackArr+0x3>
 c90:	09 95       	icall
	}
	
}
 c92:	ff 91       	pop	r31
 c94:	ef 91       	pop	r30
 c96:	bf 91       	pop	r27
 c98:	af 91       	pop	r26
 c9a:	9f 91       	pop	r25
 c9c:	8f 91       	pop	r24
 c9e:	7f 91       	pop	r23
 ca0:	6f 91       	pop	r22
 ca2:	5f 91       	pop	r21
 ca4:	4f 91       	pop	r20
 ca6:	3f 91       	pop	r19
 ca8:	2f 91       	pop	r18
 caa:	0f 90       	pop	r0
 cac:	0f be       	out	0x3f, r0	; 63
 cae:	0f 90       	pop	r0
 cb0:	1f 90       	pop	r1
 cb2:	18 95       	reti

00000cb4 <__vector_11>:
//----------------------------------------------------------------------------------------------------------

ISR(TIMER0_OVF_vect)
{
 cb4:	1f 92       	push	r1
 cb6:	0f 92       	push	r0
 cb8:	0f b6       	in	r0, 0x3f	; 63
 cba:	0f 92       	push	r0
 cbc:	11 24       	eor	r1, r1
 cbe:	2f 93       	push	r18
 cc0:	3f 93       	push	r19
 cc2:	4f 93       	push	r20
 cc4:	5f 93       	push	r21
 cc6:	6f 93       	push	r22
 cc8:	7f 93       	push	r23
 cca:	8f 93       	push	r24
 ccc:	9f 93       	push	r25
 cce:	af 93       	push	r26
 cd0:	bf 93       	push	r27
 cd2:	ef 93       	push	r30
 cd4:	ff 93       	push	r31
	static u8 counter=0;
	counter++;
 cd6:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <counter.1679>
 cda:	8f 5f       	subi	r24, 0xFF	; 255
 cdc:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <counter.1679>
	if (counter == 63)
 ce0:	8f 33       	cpi	r24, 0x3F	; 63
 ce2:	39 f4       	brne	.+14     	; 0xcf2 <__vector_11+0x3e>
	{
		counter=0;
 ce4:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <counter.1679>
		pv_CallBackArr[TIMER0_OVF_INT_ID]();
 ce8:	e0 91 cd 00 	lds	r30, 0x00CD	; 0x8000cd <pv_CallBackArr>
 cec:	f0 91 ce 00 	lds	r31, 0x00CE	; 0x8000ce <pv_CallBackArr+0x1>
 cf0:	09 95       	icall
	}
 cf2:	ff 91       	pop	r31
 cf4:	ef 91       	pop	r30
 cf6:	bf 91       	pop	r27
 cf8:	af 91       	pop	r26
 cfa:	9f 91       	pop	r25
 cfc:	8f 91       	pop	r24
 cfe:	7f 91       	pop	r23
 d00:	6f 91       	pop	r22
 d02:	5f 91       	pop	r21
 d04:	4f 91       	pop	r20
 d06:	3f 91       	pop	r19
 d08:	2f 91       	pop	r18
 d0a:	0f 90       	pop	r0
 d0c:	0f be       	out	0x3f, r0	; 63
 d0e:	0f 90       	pop	r0
 d10:	1f 90       	pop	r1
 d12:	18 95       	reti

00000d14 <__tablejump2__>:
 d14:	ee 0f       	add	r30, r30
 d16:	ff 1f       	adc	r31, r31
 d18:	05 90       	lpm	r0, Z+
 d1a:	f4 91       	lpm	r31, Z
 d1c:	e0 2d       	mov	r30, r0
 d1e:	09 94       	ijmp

00000d20 <__umoddi3>:
 d20:	68 94       	set
 d22:	01 c0       	rjmp	.+2      	; 0xd26 <__udivdi3_umoddi3>

00000d24 <__udivdi3>:
 d24:	e8 94       	clt

00000d26 <__udivdi3_umoddi3>:
 d26:	8f 92       	push	r8
 d28:	9f 92       	push	r9
 d2a:	cf 93       	push	r28
 d2c:	df 93       	push	r29
 d2e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__udivmod64>
 d32:	df 91       	pop	r29
 d34:	cf 91       	pop	r28
 d36:	9f 90       	pop	r9
 d38:	8f 90       	pop	r8
 d3a:	08 95       	ret

00000d3c <__udivmod64>:
 d3c:	88 24       	eor	r8, r8
 d3e:	99 24       	eor	r9, r9
 d40:	f4 01       	movw	r30, r8
 d42:	e4 01       	movw	r28, r8
 d44:	b0 e4       	ldi	r27, 0x40	; 64
 d46:	9f 93       	push	r25
 d48:	aa 27       	eor	r26, r26
 d4a:	9a 15       	cp	r25, r10
 d4c:	8b 04       	cpc	r8, r11
 d4e:	9c 04       	cpc	r9, r12
 d50:	ed 05       	cpc	r30, r13
 d52:	fe 05       	cpc	r31, r14
 d54:	cf 05       	cpc	r28, r15
 d56:	d0 07       	cpc	r29, r16
 d58:	a1 07       	cpc	r26, r17
 d5a:	98 f4       	brcc	.+38     	; 0xd82 <__udivmod64+0x46>
 d5c:	ad 2f       	mov	r26, r29
 d5e:	dc 2f       	mov	r29, r28
 d60:	cf 2f       	mov	r28, r31
 d62:	fe 2f       	mov	r31, r30
 d64:	e9 2d       	mov	r30, r9
 d66:	98 2c       	mov	r9, r8
 d68:	89 2e       	mov	r8, r25
 d6a:	98 2f       	mov	r25, r24
 d6c:	87 2f       	mov	r24, r23
 d6e:	76 2f       	mov	r23, r22
 d70:	65 2f       	mov	r22, r21
 d72:	54 2f       	mov	r21, r20
 d74:	43 2f       	mov	r20, r19
 d76:	32 2f       	mov	r19, r18
 d78:	22 27       	eor	r18, r18
 d7a:	b8 50       	subi	r27, 0x08	; 8
 d7c:	31 f7       	brne	.-52     	; 0xd4a <__udivmod64+0xe>
 d7e:	bf 91       	pop	r27
 d80:	27 c0       	rjmp	.+78     	; 0xdd0 <__udivmod64+0x94>
 d82:	1b 2e       	mov	r1, r27
 d84:	bf 91       	pop	r27
 d86:	bb 27       	eor	r27, r27
 d88:	22 0f       	add	r18, r18
 d8a:	33 1f       	adc	r19, r19
 d8c:	44 1f       	adc	r20, r20
 d8e:	55 1f       	adc	r21, r21
 d90:	66 1f       	adc	r22, r22
 d92:	77 1f       	adc	r23, r23
 d94:	88 1f       	adc	r24, r24
 d96:	99 1f       	adc	r25, r25
 d98:	88 1c       	adc	r8, r8
 d9a:	99 1c       	adc	r9, r9
 d9c:	ee 1f       	adc	r30, r30
 d9e:	ff 1f       	adc	r31, r31
 da0:	cc 1f       	adc	r28, r28
 da2:	dd 1f       	adc	r29, r29
 da4:	aa 1f       	adc	r26, r26
 da6:	bb 1f       	adc	r27, r27
 da8:	8a 14       	cp	r8, r10
 daa:	9b 04       	cpc	r9, r11
 dac:	ec 05       	cpc	r30, r12
 dae:	fd 05       	cpc	r31, r13
 db0:	ce 05       	cpc	r28, r14
 db2:	df 05       	cpc	r29, r15
 db4:	a0 07       	cpc	r26, r16
 db6:	b1 07       	cpc	r27, r17
 db8:	48 f0       	brcs	.+18     	; 0xdcc <__udivmod64+0x90>
 dba:	8a 18       	sub	r8, r10
 dbc:	9b 08       	sbc	r9, r11
 dbe:	ec 09       	sbc	r30, r12
 dc0:	fd 09       	sbc	r31, r13
 dc2:	ce 09       	sbc	r28, r14
 dc4:	df 09       	sbc	r29, r15
 dc6:	a0 0b       	sbc	r26, r16
 dc8:	b1 0b       	sbc	r27, r17
 dca:	21 60       	ori	r18, 0x01	; 1
 dcc:	1a 94       	dec	r1
 dce:	e1 f6       	brne	.-72     	; 0xd88 <__udivmod64+0x4c>
 dd0:	2e f4       	brtc	.+10     	; 0xddc <__udivmod64+0xa0>
 dd2:	94 01       	movw	r18, r8
 dd4:	af 01       	movw	r20, r30
 dd6:	be 01       	movw	r22, r28
 dd8:	cd 01       	movw	r24, r26
 dda:	00 0c       	add	r0, r0
 ddc:	08 95       	ret

00000dde <__ashldi3>:
 dde:	0f 93       	push	r16
 de0:	08 30       	cpi	r16, 0x08	; 8
 de2:	90 f0       	brcs	.+36     	; 0xe08 <__ashldi3+0x2a>
 de4:	98 2f       	mov	r25, r24
 de6:	87 2f       	mov	r24, r23
 de8:	76 2f       	mov	r23, r22
 dea:	65 2f       	mov	r22, r21
 dec:	54 2f       	mov	r21, r20
 dee:	43 2f       	mov	r20, r19
 df0:	32 2f       	mov	r19, r18
 df2:	22 27       	eor	r18, r18
 df4:	08 50       	subi	r16, 0x08	; 8
 df6:	f4 cf       	rjmp	.-24     	; 0xde0 <__ashldi3+0x2>
 df8:	22 0f       	add	r18, r18
 dfa:	33 1f       	adc	r19, r19
 dfc:	44 1f       	adc	r20, r20
 dfe:	55 1f       	adc	r21, r21
 e00:	66 1f       	adc	r22, r22
 e02:	77 1f       	adc	r23, r23
 e04:	88 1f       	adc	r24, r24
 e06:	99 1f       	adc	r25, r25
 e08:	0a 95       	dec	r16
 e0a:	b2 f7       	brpl	.-20     	; 0xdf8 <__ashldi3+0x1a>
 e0c:	0f 91       	pop	r16
 e0e:	08 95       	ret

00000e10 <__adddi3>:
 e10:	2a 0d       	add	r18, r10
 e12:	3b 1d       	adc	r19, r11
 e14:	4c 1d       	adc	r20, r12
 e16:	5d 1d       	adc	r21, r13
 e18:	6e 1d       	adc	r22, r14
 e1a:	7f 1d       	adc	r23, r15
 e1c:	80 1f       	adc	r24, r16
 e1e:	91 1f       	adc	r25, r17
 e20:	08 95       	ret

00000e22 <__cmpdi2_s8>:
 e22:	00 24       	eor	r0, r0
 e24:	a7 fd       	sbrc	r26, 7
 e26:	00 94       	com	r0
 e28:	2a 17       	cp	r18, r26
 e2a:	30 05       	cpc	r19, r0
 e2c:	40 05       	cpc	r20, r0
 e2e:	50 05       	cpc	r21, r0
 e30:	60 05       	cpc	r22, r0
 e32:	70 05       	cpc	r23, r0
 e34:	80 05       	cpc	r24, r0
 e36:	90 05       	cpc	r25, r0
 e38:	08 95       	ret

00000e3a <_exit>:
 e3a:	f8 94       	cli

00000e3c <__stop_program>:
 e3c:	ff cf       	rjmp	.-2      	; 0xe3c <__stop_program>
